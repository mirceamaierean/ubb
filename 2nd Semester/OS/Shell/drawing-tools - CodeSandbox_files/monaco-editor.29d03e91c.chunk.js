(this.csbJsonP=this.csbJsonP||[]).push([["monaco-editor"],{"../../node_modules/raw-loader/index.js!./src/embed/components/Content/Monaco/grammars/tmGrammars/TypeScriptReact.tmLanguage":function(t,n){t.exports='<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n  <dict>\n    <key>name</key>\n    <string>TypeScriptReact</string>\n    <key>scopeName</key>\n    <string>source.tsx</string>\n    <key>fileTypes</key>\n    <array>\n      <string>tsx</string>\n    </array>\n    <key>uuid</key>\n    <string>805375ec-d614-41f5-8993-5843fe63ea82</string>\n    <key>patterns</key>\n    <array>\n      <dict>\n        <key>include</key>\n        <string>#directives</string>\n      </dict>\n      <dict>\n        <key>include</key>\n        <string>#statements</string>\n      </dict>\n      <dict>\n        <key>name</key>\n        <string>comment.line.shebang.ts</string>\n        <key>match</key>\n        <string>\\A(#!).*(?=$)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.comment.ts</string>\n          </dict>\n        </dict>\n      </dict>\n    </array>\n    <key>repository</key>\n    <dict>\n      <key>statements</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#template</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#control-statement</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#after-operator-block-as-object-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#label</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-semicolon</string>\n          </dict>\n        </array>\n      </dict>\n      <key>declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#var-expr</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#interface-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#enum-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#namespace-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-alias-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-equals-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#export-declaration</string>\n          </dict>\n        </array>\n      </dict>\n      <key>control-statement</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#switch-statement</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#for-loop</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.trycatch.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.loop.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.loop.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.flow.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.switch.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.conditional.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.with.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.other.debugger.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(declare)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>label</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.label.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#decl-block</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.label.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>expression</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expressionWithoutIdentifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#identifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionPunctuations</string>\n          </dict>\n        </array>\n      </dict>\n      <key>expressionWithoutIdentifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#template</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#arrow-function</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#paren-expression-possibly-arrow</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#cast</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#ternary-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#new-expr</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#instanceof-expr</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expression-operators</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-call</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#support-objects</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#paren-expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>expressionPunctuations</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-accessor</string>\n          </dict>\n        </array>\n      </dict>\n      <key>decorator</key>\n      <dict>\n        <key>name</key>\n        <string>meta.decorator.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))\\@</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.decorator.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\s)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>var-expr</key>\n      <dict>\n        <key>name</key>\n        <string>meta.var.expr.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?\\b(var|let|const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=$|^|;|}|(\\s+(of|in)\\s+))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#var-single-variable</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(,)\\s*(?!\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.comma.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;!,)((?==|;|}|(\\s+(of|in)\\s+)|^\\s*$))|((?&lt;=\\S)(?=\\s*$))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#destructuring-variable</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>var-single-variable</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.tsx</string>\n            <key>begin</key>\n            <string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*([\\(]\\s*([\\{\\[]\\s*)?$)) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.tsx entity.name.function.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|(\\s+(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.tsx</string>\n            <key>begin</key>\n            <string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.tsx variable.other.constant.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|(\\s+(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.tsx</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.tsx variable.other.readwrite.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|(\\s+(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>var-single-variable-type-annotation</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-variable</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.object-binding-pattern-variable.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)</string>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|(\\s+(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-pattern</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.array-binding-pattern-variable.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)</string>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|(\\s+(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#array-binding-pattern</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>object-binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?=((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-element-propertyName</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#binding-element</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-binding-element-propertyName</key>\n      <dict>\n        <key>begin</key>\n        <string>(?x)(?=((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n        <key>end</key>\n        <string>(:)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.destructuring.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.object.property.tsx</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n          </dict>\n        </array>\n      </dict>\n      <key>binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-variable-rest</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.variable.tsx variable.other.readwrite.tsx</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>object-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-element</string>\n          </dict>\n        </array>\n      </dict>\n      <key>array-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#binding-element</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-name</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|protected|private|readonly)\\s+(?=(public|protected|private|readonly)\\s+)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*([\\(]\\s*([\\{\\[]\\s*)?$)) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx variable.language.this.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.tsx variable.language.this.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-parameter</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.parameter.object-binding-pattern.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:)\\s*(\\{)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.object.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\}</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.object.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#parameter-object-binding-element</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.paramter.array-binding-pattern.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:)\\s*(\\[)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.array.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\]</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.array.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#parameter-binding-element</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-object-binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?=((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-element-propertyName</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#parameter-binding-element</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-array-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-parameter-rest</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>variable.parameter.tsx</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>parameter-object-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#parameter-object-binding-element</string>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-array-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#parameter-binding-element</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>field-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.field.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?x)(?&lt;!\\()(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(readonly)\\s+)?(?=\\s*((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?=((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))</string>\n            <key>end</key>\n            <string>(?x)(?=[};,=]|$|(^(?!\\s*((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#array-literal</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#numeric-literal</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\?)?(?=(\\?\\s*)?\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*([\\(]\\s*([\\{\\[]\\s*)?$)) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.definition.property.tsx entity.name.function.tsx</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.optional.tsx</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.property.tsx variable.object.property.tsx</string>\n                <key>match</key>\n                <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.tsx</string>\n                <key>match</key>\n                <string>\\?</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>variable-initializer</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;!=|!)(=)(?!=)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[,);}\\]])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;!=|!)(=)(?!=)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=[,);}\\]])|(?=^\\s*$)|(?&lt;=\\S)(?&lt;!=)(?=\\s*$)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>function-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.function.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?&lt;=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.async.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.function.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.tsx</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.function.tsx entity.name.function.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=$|^|;)|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#function-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-expression</key>\n      <dict>\n        <key>name</key>\n        <string>meta.function.expression.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?&lt;=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.async.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.function.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.function.tsx entity.name.function.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#function-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-name</key>\n      <dict>\n        <key>name</key>\n        <string>meta.definition.function.tsx entity.name.function.tsx</string>\n        <key>match</key>\n        <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n      </dict>\n      <key>function-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#return-type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.tsx</string>\n            <key>match</key>\n            <string>\\*</string>\n          </dict>\n        </array>\n      </dict>\n      <key>method-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.tsx</string>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.tsx</string>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*[\\(\\&lt;])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.new.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.tsx</string>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\&lt;])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.property.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>object-literal-method-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.method.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\&lt;])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.async.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.property.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\}|;|,)|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#method-declaration-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-body</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\&lt;])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.property.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\(|\\&lt;)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>method-declaration-name</key>\n      <dict>\n        <key>begin</key>\n        <string>(?x)(?=((\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$))|(\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\&lt;])</string>\n        <key>end</key>\n        <string>(?=\\(|\\&lt;)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.method.tsx entity.name.function.tsx</string>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.tsx</string>\n            <key>match</key>\n            <string>\\?</string>\n          </dict>\n        </array>\n      </dict>\n      <key>arrow-function</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.tsx</string>\n            <key>match</key>\n            <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==&gt;)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.tsx</string>\n            <key>begin</key>\n            <string>(?x) (?:\n  (?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(\\basync)\n)? ((?&lt;![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  )\n)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?==&gt;|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-parameters</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-parameters</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#arrow-return-type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.tsx</string>\n            <key>begin</key>\n            <string>=&gt;</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.function.arrow.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\}|\\S)(?&lt;!=&gt;)|((?!\\{)(?=\\S))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#decl-block</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>indexer-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.indexer.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>variable.parameter.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\\])\\s*(\\?\\s*)?|$</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n        </array>\n      </dict>\n      <key>indexer-mapped-type-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.indexer.mappedtype.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.modifier.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.tsx</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.in.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\\])([+-])?\\s*(\\?\\s*)?|$</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.modifier.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-parameters</key>\n      <dict>\n        <key>name</key>\n        <string>meta.parameters.tsx</string>\n        <key>begin</key>\n        <string>\\(</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.parameters.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.parameters.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#function-parameters-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-parameters-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.parameter.tsx</string>\n            <key>match</key>\n            <string>,</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.class.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.class.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration-or-expression-patterns</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-expression</key>\n      <dict>\n        <key>name</key>\n        <string>meta.class.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(class)\\b(?=\\s+|[&lt;{]|\\/[\\/*])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.class.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration-or-expression-patterns</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-declaration-or-expression-patterns</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-heritage</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.class.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>interface-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.interface.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.interface.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-heritage</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.interface.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-or-interface-heritage</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\{)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-heritage</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionWithoutIdentifiers</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.other.inherited-class.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionPunctuations</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-or-interface-body</key>\n      <dict>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#method-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#indexer-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#field-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#access-modifier</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#property-accessor</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#async-modifier</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#after-operator-block-as-object-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-semicolon</string>\n          </dict>\n        </array>\n      </dict>\n      <key>access-modifier</key>\n      <dict>\n        <key>name</key>\n        <string>storage.modifier.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(abstract|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>property-accessor</key>\n      <dict>\n        <key>name</key>\n        <string>storage.type.property.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>async-modifier</key>\n      <dict>\n        <key>name</key>\n        <string>storage.modifier.async.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>enum-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.enum.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.enum.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.enum.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\{</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\}</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>variable.other.enummember.tsx</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?=,|\\}|$)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#comment</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#variable-initializer</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?=((\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))</string>\n                <key>end</key>\n                <string>(?=,|\\}|$)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#string</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#array-literal</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#comment</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#variable-initializer</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>namespace-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.namespace.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]"\'`]))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.namespace.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})|(?=;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.module.tsx</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-accessor</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-alias-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.declaration.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.type.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.alias.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\}|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(=)\\s*</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>import-equals-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.import-equals.external.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.import.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.require.tsx</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.import-equals.internal.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.import.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=;|$|^)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.type.module.tsx</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.accessor.tsx</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.accessor.optional.tsx</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.tsx</string>\n                <key>match</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>import-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.import.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?\\b(import)(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.import.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;!^import|[^\\._$[:alnum:]]import)(?=;|$|^)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=^import|[^\\._$[:alnum:]]import)(?!\\s*["\'])</string>\n            <key>end</key>\n            <string>\\bfrom\\b</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.from.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#import-export-declaration</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-export-declaration</string>\n          </dict>\n        </array>\n      </dict>\n      <key>export-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.namespace.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.export.default.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(export)(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.default.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.export.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(export)(?!\\s*:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#import-export-declaration</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>import-export-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-export-block</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.from.tsx</string>\n            <key>match</key>\n            <string>\\bfrom\\b</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-export-clause</string>\n          </dict>\n        </array>\n      </dict>\n      <key>import-export-block</key>\n      <dict>\n        <key>name</key>\n        <string>meta.block.tsx</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#import-export-clause</string>\n          </dict>\n        </array>\n      </dict>\n      <key>import-export-clause</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*))\\s+(as)\\s+(?:(\\bdefault(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(\\b[_$[:alpha:]][_$[:alnum:]]*))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.default.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>constant.language.import-export-all.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.default.tsx</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.language.import-export-all.tsx</string>\n            <key>match</key>\n            <string>\\*</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.default.tsx</string>\n            <key>match</key>\n            <string>\\b(default)\\b</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.other.readwrite.alias.tsx</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n          </dict>\n        </array>\n      </dict>\n      <key>switch-statement</key>\n      <dict>\n        <key>name</key>\n        <string>switch-statement.expr.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?=\\bswitch\\s*\\()</string>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>switch-expression.expr.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(switch)\\s*(\\()</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.switch.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>switch-block.expr.tsx</string>\n            <key>begin</key>\n            <string>\\{</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>case-clause.expr.tsx</string>\n                <key>begin</key>\n                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.control.switch.tsx</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?=:)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#expression</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(:)\\s*(\\{)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>case-clause.expr.tsx punctuation.definition.section.case-statement.tsx</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.block.tsx punctuation.definition.block.tsx</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>\\}</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.block.tsx punctuation.definition.block.tsx</string>\n                  </dict>\n                </dict>\n                <key>contentName</key>\n                <string>meta.block.tsx</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#statements</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>(:)</string>\n                <key>captures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>case-clause.expr.tsx punctuation.definition.section.case-statement.tsx</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#statements</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>for-loop</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.loop.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.loop.tsx</string>\n            <key>match</key>\n            <string>await</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\(</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-expr</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-semicolon</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>decl-block</key>\n      <dict>\n        <key>name</key>\n        <string>meta.block.tsx</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#statements</string>\n          </dict>\n        </array>\n      </dict>\n      <key>after-operator-block-as-object-literal</key>\n      <dict>\n        <key>name</key>\n        <string>meta.objectliteral.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;!\\+\\+|--)(?&lt;=[:=(,\\[?+!&gt;]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&amp;&amp;|\\|\\||\\*)\\s*(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-member</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-literal</key>\n      <dict>\n        <key>name</key>\n        <string>meta.objectliteral.tsx</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-member</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-member</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-literal-method-declaration</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx meta.object-literal.key.tsx</string>\n            <key>begin</key>\n            <string>(?=\\[)</string>\n            <key>end</key>\n            <string>(?=:)|((?&lt;=[\\]])(?=\\s*[\\(\\&lt;]))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#array-literal</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx meta.object-literal.key.tsx</string>\n            <key>begin</key>\n            <string>(?=[\\\'\\"])</string>\n            <key>end</key>\n            <string>(?=:)|((?&lt;=[\\\'\\"])(?=\\s*[\\(\\&lt;]))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;=[\\]\\\'\\"])(?=\\s*[\\(\\&lt;])</string>\n            <key>end</key>\n            <string>(?=\\}|;|,)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>match</key>\n            <string>(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=:)</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.tsx</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>constant.numeric.decimal.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>match</key>\n            <string>(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.tsx</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>match</key>\n            <string>(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>begin</key>\n            <string>\\.\\.\\.</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.spread.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>begin</key>\n            <string>(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)</string>\n            <key>end</key>\n            <string>(?=,|\\}|$)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.tsx</string>\n            <key>begin</key>\n            <string>:</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.tsx punctuation.separator.key-value.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;=:)\\s*(async)?(?=\\s*(&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)\\(\\s*([\\{\\[]\\s*)?$)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.async.tsx</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?&lt;=\\))</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#type-parameters</string>\n                  </dict>\n                  <dict>\n                    <key>begin</key>\n                    <string>\\(</string>\n                    <key>beginCaptures</key>\n                    <dict>\n                      <key>0</key>\n                      <dict>\n                        <key>name</key>\n                        <string>meta.brace.round.tsx</string>\n                      </dict>\n                    </dict>\n                    <key>end</key>\n                    <string>\\)</string>\n                    <key>endCaptures</key>\n                    <dict>\n                      <key>0</key>\n                      <dict>\n                        <key>name</key>\n                        <string>meta.brace.round.tsx</string>\n                      </dict>\n                    </dict>\n                    <key>patterns</key>\n                    <array>\n                      <dict>\n                        <key>include</key>\n                        <string>#expression-inside-possibly-arrow-parens</string>\n                      </dict>\n                    </array>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;=:)\\s*(async)?\\s*(\\()(?=\\s*([\\{\\[]\\s*)?$)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.async.tsx</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.tsx</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>\\)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.tsx</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#expression-inside-possibly-arrow-parens</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>ternary-expression</key>\n      <dict>\n        <key>begin</key>\n        <string>(?!\\?\\.\\s*[^[:digit:]])(\\?)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.ternary.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\s*(:)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.ternary.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-call</key>\n      <dict>\n        <key>begin</key>\n        <string>(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?\\.\\s*)?(&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;)*(?!=)\\&gt;)*(?!=)&gt;\\s*)?\\()</string>\n        <key>end</key>\n        <string>(?&lt;=\\))(?!(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?\\.\\s*)?(&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;)*(?!=)\\&gt;)*(?!=)&gt;\\s*)?\\()</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.function-call.tsx</string>\n            <key>begin</key>\n            <string>(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))</string>\n            <key>end</key>\n            <string>(?=\\s*(\\?\\.\\s*)?(&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;)*(?!=)\\&gt;)*(?!=)&gt;\\s*)?\\()</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#literal</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#support-objects</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#object-identifiers</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-accessor</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.expression.import.tsx</string>\n                <key>match</key>\n                <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))import(?=\\s*[\\(]\\s*[\\"\\\'\\`]))</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx</string>\n                <key>match</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.function-call.tsx punctuation.accessor.optional.tsx</string>\n            <key>match</key>\n            <string>\\?\\.</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-arguments</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#paren-expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>new-expr</key>\n      <dict>\n        <key>name</key>\n        <string>new.expr.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.new.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\))|(?=[;),}\\]:]|\\|\\||\\&amp;\\&amp;|$|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#paren-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>instanceof-expr</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.instanceof.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\))|(?=[;),}\\]:?]|\\|\\||\\&amp;\\&amp;|$|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>paren-expression-possibly-arrow</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[(=,])\\s*(async)?(?=\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*))?\\(\\s*[\\{\\[]\\s*$)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#paren-expression-possibly-arrow-with-typeparameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[(=,]|=&gt;)\\s*(async)?(?=\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*))?\\(\\s*$)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#paren-expression-possibly-arrow-with-typeparameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#possibly-arrow-return-type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>paren-expression-possibly-arrow-with-typeparameters</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\(</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression-inside-possibly-arrow-parens</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>expression-inside-possibly-arrow-parens</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expressionWithoutIdentifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-parameters-body</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#identifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionPunctuations</string>\n          </dict>\n        </array>\n      </dict>\n      <key>paren-expression</key>\n      <dict>\n        <key>begin</key>\n        <string>\\(</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>cast</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx</string>\n          </dict>\n        </array>\n      </dict>\n      <key>expression-operators</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.flow.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.flow.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\*</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.flow.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.delete.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.in.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.of.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.instanceof.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.new.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#typeof-operator</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.void.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,:})\\]]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.spread.tsx</string>\n            <key>match</key>\n            <string>\\.\\.\\.</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.compound.tsx</string>\n            <key>match</key>\n            <string>\\*=|(?&lt;!\\()/=|%=|\\+=|\\-=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.compound.bitwise.tsx</string>\n            <key>match</key>\n            <string>\\&amp;=|\\^=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\\|=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.bitwise.shift.tsx</string>\n            <key>match</key>\n            <string>&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.comparison.tsx</string>\n            <key>match</key>\n            <string>===|!==|==|!=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.relational.tsx</string>\n            <key>match</key>\n            <string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.logical.tsx</string>\n            <key>match</key>\n            <string>\\!|&amp;&amp;|\\|\\|</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.bitwise.tsx</string>\n            <key>match</key>\n            <string>\\&amp;|~|\\^|\\|</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.tsx</string>\n            <key>match</key>\n            <string>\\=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.decrement.tsx</string>\n            <key>match</key>\n            <string>--</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.increment.tsx</string>\n            <key>match</key>\n            <string>\\+\\+</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.arithmetic.tsx</string>\n            <key>match</key>\n            <string>%|\\*|/|-|\\+</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;=[_$[:alnum:])\\]])\\s*(/)(?![/*])</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.arithmetic.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>typeof-operator</key>\n      <dict>\n        <key>name</key>\n        <string>keyword.operator.expression.typeof.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#boolean-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#null-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#undefined-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numericConstant-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#this-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#super-literal</string>\n          </dict>\n        </array>\n      </dict>\n      <key>array-literal</key>\n      <dict>\n        <key>name</key>\n        <string>meta.array.literal.tsx</string>\n        <key>begin</key>\n        <string>\\s*(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>numeric-literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.numeric.hex.tsx</string>\n            <key>match</key>\n            <string>\\b(?&lt;!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.numeric.binary.tsx</string>\n            <key>match</key>\n            <string>\\b(?&lt;!\\$)0(b|B)[01][01_]*\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.numeric.octal.tsx</string>\n            <key>match</key>\n            <string>\\b(?&lt;!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n(?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>constant.numeric.decimal.tsx</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.tsx</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>boolean-literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.language.boolean.true.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.language.boolean.false.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>null-literal</key>\n      <dict>\n        <key>name</key>\n        <string>constant.language.null.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>this-literal</key>\n      <dict>\n        <key>name</key>\n        <string>variable.language.this.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))this\\b(?!\\$)</string>\n      </dict>\n      <key>super-literal</key>\n      <dict>\n        <key>name</key>\n        <string>variable.language.super.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))super\\b(?!\\$)</string>\n      </dict>\n      <key>undefined-literal</key>\n      <dict>\n        <key>name</key>\n        <string>constant.language.undefined.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>numericConstant-literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.language.nan.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.language.infinity.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>support-objects</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>variable.language.arguments.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(arguments)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.builtin.tsx</string>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator\n  |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.error.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.promise.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Promise)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.function.tsx</string>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Math)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.math.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.math.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.property.math.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(console)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.class.console.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.console.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(JSON)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(parse|stringify))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.json.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.json.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.import.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.importmeta.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.new.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.target.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (constructor|length|prototype|__proto__)\n  |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.)) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.dom.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>support.class.dom.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\\()</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.dom.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.dom.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.node.tsx</string>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(process)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.object.process.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.process.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.process.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.type.object.module.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>support.type.object.module.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.type.object.module.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.variable.object.node.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n ) |\n (all|catch|finally|race|reject|resolve|then\n )\n)(?=\\s*\\()</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.event-handler.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.dom.tsx</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.promise.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>identifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-identifiers</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*([\\{\\[]\\s*)?$) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [&lt;]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=&gt;]                                                              # &lt; typeparam extends\n) |\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.constant.property.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.property.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.other.constant.tsx</string>\n            <key>match</key>\n            <string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.other.readwrite.tsx</string>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-identifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>support.class.tsx</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.constant.object.property.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.object.property.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.constant.object.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.object.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>type-annotation</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.type.annotation.tsx</string>\n            <key>begin</key>\n            <string>(:)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])((?=$|^|[,);\\}\\]]|//)|(?==[^&gt;])|((?&lt;=[\\}&gt;\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.annotation.tsx</string>\n            <key>begin</key>\n            <string>(:)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])((?=[,);\\}\\]]|//)|(?==[^&gt;])|(?=^\\s*$)|((?&lt;=\\S)(?=\\s*$))|((?&lt;=[\\}&gt;\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>return-type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.return.type.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;=\\))\\s*(:)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])(?=$|^|[{};,]|//)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.return.type.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;=\\))\\s*(:)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])((?=[{};,]|//|^\\s*$)|((?&lt;=\\S)(?=\\s*$)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>return-type-core</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[:|&amp;])(?=\\s*\\{)</string>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-predicate-operator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>arrow-return-type</key>\n      <dict>\n        <key>name</key>\n        <string>meta.return.type.arrow.tsx</string>\n        <key>begin</key>\n        <string>(?&lt;=\\))\\s*(:)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.annotation.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?==&gt;|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#arrow-return-type-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>possibly-arrow-return-type</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;=\\))\\s*(:)(?=\\s*([^&lt;&gt;\\(\\)]|\\&lt;[^&lt;&gt;]+\\&gt;|\\([^\\(\\)]+\\))+\\s*=&gt;)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.tsx meta.return.type.arrow.tsx keyword.operator.type.annotation.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?==&gt;|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))</string>\n        <key>contentName</key>\n        <string>meta.arrow.tsx meta.return.type.arrow.tsx</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#arrow-return-type-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>arrow-return-type-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[:])(?=\\s*\\{)</string>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-predicate-operator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-parameters</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.parameters.tsx</string>\n        <key>begin</key>\n        <string>(&lt;)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(&gt;)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-arguments</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.parameters.tsx</string>\n        <key>begin</key>\n        <string>\\&lt;</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\&gt;</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-primitive</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-builtin-literals</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-tuple</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-object</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-conditional</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-operators</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-fn-type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-paren-or-function-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-function-return-type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-name</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-primitive</key>\n      <dict>\n        <key>name</key>\n        <string>support.type.primitive.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(string|number|boolean|symbol|any|void|never)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>type-builtin-literals</key>\n      <dict>\n        <key>name</key>\n        <string>support.type.builtin.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>type-tuple</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.tuple.tsx</string>\n        <key>begin</key>\n        <string>\\[</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-object</key>\n      <dict>\n        <key>name</key>\n        <string>meta.object.type.tsx</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#method-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#indexer-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#indexer-mapped-type-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#field-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\.\\.\\.</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.spread.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-semicolon</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-conditional</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(extends)\\s+</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=:)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>\\?</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.ternary.tsx</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>:</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.ternary.tsx</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#type</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>type-paren-or-function-parameters</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.paren.cover.tsx</string>\n        <key>begin</key>\n        <string>\\(</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*([\\(]\\s*([\\{\\[]\\s*)?$)))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx variable.language.this.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.tsx variable.language.this.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.parameter.tsx</string>\n            <key>match</key>\n            <string>,</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-fn-type-parameters</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.type.constructor.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(new)\\b(?=\\s*\\&lt;)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.new.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.constructor.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(new)\\b\\s*(?=\\()</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.new.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#function-parameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.function.tsx</string>\n            <key>begin</key>\n            <string>(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=&gt;)\n      ))\n    )\n  )\n)</string>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#function-parameters</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>type-function-return-type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.type.function.return.tsx</string>\n            <key>begin</key>\n            <string>(=&gt;)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.function.arrow.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;!=&gt;)(?&lt;![|&amp;])(?=[,\\]\\)\\{\\}=;&gt;:\\?]|//|$)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-function-return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.function.return.tsx</string>\n            <key>begin</key>\n            <string>=&gt;</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.function.arrow.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;!=&gt;)(?&lt;![|&amp;])((?=[,\\]\\)\\{\\}=;:\\?&gt;]|//|^\\s*$)|((?&lt;=\\S)(?=\\s*$)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-function-return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>type-function-return-type-core</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;==&gt;)(?=\\s*\\{)</string>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-predicate-operator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-operators</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#typeof-operator</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?:([&amp;|])|(=(?!&gt;)))(?=\\s*\\{)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>([&amp;|])|(=(?!&gt;))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\S)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.keyof.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.ternary.tsx</string>\n            <key>match</key>\n            <string>(\\?|\\:)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.infer.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))infer(?=\\s+[_$[:alpha:]])</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.import.tsx</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))import(?=\\s*\\()</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-predicate-operator</key>\n      <dict>\n        <key>name</key>\n        <string>keyword.operator.expression.is.tsx</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>type-name</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.tsx</string>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n        </array>\n      </dict>\n      <key>punctuation-comma</key>\n      <dict>\n        <key>name</key>\n        <string>punctuation.separator.comma.tsx</string>\n        <key>match</key>\n        <string>,</string>\n      </dict>\n      <key>punctuation-semicolon</key>\n      <dict>\n        <key>name</key>\n        <string>punctuation.terminator.statement.tsx</string>\n        <key>match</key>\n        <string>;</string>\n      </dict>\n      <key>punctuation-accessor</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.accessor.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.accessor.optional.tsx</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>string</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#qstring-single</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#qstring-double</string>\n          </dict>\n        </array>\n      </dict>\n      <key>qstring-double</key>\n      <dict>\n        <key>name</key>\n        <string>string.quoted.double.tsx</string>\n        <key>begin</key>\n        <string>"</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(")|((?:[^\\\\\\n])$)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.end.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.newline.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string-character-escape</string>\n          </dict>\n        </array>\n      </dict>\n      <key>qstring-single</key>\n      <dict>\n        <key>name</key>\n        <string>string.quoted.single.tsx</string>\n        <key>begin</key>\n        <string>\'</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\\\')|((?:[^\\\\\\n])$)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.end.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.newline.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string-character-escape</string>\n          </dict>\n        </array>\n      </dict>\n      <key>string-character-escape</key>\n      <dict>\n        <key>name</key>\n        <string>constant.character.escape.tsx</string>\n        <key>match</key>\n        <string>\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>\n      </dict>\n      <key>template</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>string.template.tsx</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\\'[^\\\']*\\\')|(\\"[^\\"]*\\")|(\\`[^\\`]*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[=]|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?&lt;==)\\&gt;)*(?!=)\\&gt;)*(?!=)&gt;\\s*)`)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tagged-template.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=`)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>string.template.tsx</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tagged-template.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.template.begin.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>`</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.template.end.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#template-substitution-element</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string-character-escape</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>template-substitution-element</key>\n      <dict>\n        <key>name</key>\n        <string>meta.template.expression.tsx</string>\n        <key>begin</key>\n        <string>\\$\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.template-expression.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.template-expression.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n        <key>contentName</key>\n        <string>meta.embedded.line.tsx</string>\n      </dict>\n      <key>regex</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>string.regexp.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;!\\+\\+|--)(?&lt;=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=&gt;|&amp;&amp;|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/[gimsuy]*(?!\\s*[a-zA-Z0-9_$]))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.begin.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(/)([gimsuy]*)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.end.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.other.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>string.regexp.tsx</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:])\\]]|\\+\\+|--)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/[gimsuy]*(?!\\s*[a-zA-Z0-9_$]))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.begin.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(/)([gimsuy]*)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.end.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.other.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>regexp</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.anchor.regexp</string>\n            <key>match</key>\n            <string>\\\\[bB]|\\^|\\$</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>\\\\[1-9]\\d*|\\\\k&lt;([a-zA-Z_$][\\w$]*)&gt;</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.other.back-reference.regexp</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.regexp</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.quantifier.regexp</string>\n            <key>match</key>\n            <string>[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.or.regexp</string>\n            <key>match</key>\n            <string>\\|</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.group.assertion.regexp</string>\n            <key>begin</key>\n            <string>(\\()((\\?=)|(\\?!)|(\\?&lt;=)|(\\?&lt;!))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.assertion.regexp</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.look-ahead.regexp</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.negative-look-ahead.regexp</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.look-behind.regexp</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.negative-look-behind.regexp</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\))</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.group.regexp</string>\n            <key>begin</key>\n            <string>\\((?:(\\?:)|(?:\\?&lt;([a-zA-Z_$][\\w$]*)&gt;))?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.no-capture.regexp</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.regexp</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.other.character-class.set.regexp</string>\n            <key>begin</key>\n            <string>(\\[)(\\^)?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.character-class.regexp</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.negation.regexp</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\])</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.character-class.regexp</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>constant.other.character-class.range.regexp</string>\n                <key>match</key>\n                <string>(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.numeric.regexp</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.control.regexp</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.escape.backslash.regexp</string>\n                  </dict>\n                  <key>4</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.numeric.regexp</string>\n                  </dict>\n                  <key>5</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.control.regexp</string>\n                  </dict>\n                  <key>6</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.escape.backslash.regexp</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#regex-character-class</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex-character-class</string>\n          </dict>\n        </array>\n      </dict>\n      <key>regex-character-class</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.other.character-class.regexp</string>\n            <key>match</key>\n            <string>\\\\[wWsSdDtrnvf]|\\.</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.character.numeric.regexp</string>\n            <key>match</key>\n            <string>\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.character.control.regexp</string>\n            <key>match</key>\n            <string>\\\\c[A-Z]</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.character.escape.backslash.regexp</string>\n            <key>match</key>\n            <string>\\\\.</string>\n          </dict>\n        </array>\n      </dict>\n      <key>comment</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>comment.block.documentation.tsx</string>\n            <key>begin</key>\n            <string>/\\*\\*(?!/)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\*/</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#docblock</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>comment.block.tsx</string>\n            <key>begin</key>\n            <string>(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.internaldeclaration.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.decorator.internaldeclaration.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\*/</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.whitespace.comment.leading.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>comment.line.double-slash.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.internaldeclaration.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.decorator.internaldeclaration.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=^)</string>\n            <key>contentName</key>\n            <string>comment.line.double-slash.tsx</string>\n          </dict>\n        </array>\n      </dict>\n      <key>directives</key>\n      <dict>\n        <key>name</key>\n        <string>comment.line.triple-slash.directive.tsx</string>\n        <key>begin</key>\n        <string>^(///)\\s*(?=&lt;(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name)\\s*=\\s*((\\\'([^\\\'\\\\]|\\\\\\\'|\\\\)*\\\')|(\\"([^\\"\\\\]|\\\\\\"|\\\\)*\\")))+\\s*/&gt;\\s*$)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.comment.tsx</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=^)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.tag.tsx</string>\n            <key>begin</key>\n            <string>(&lt;)(reference|amd-dependency|amd-module)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.tag.directive.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.tag.directive.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>/&gt;</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.tag.directive.tsx</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>entity.other.attribute-name.directive.tsx</string>\n                <key>match</key>\n                <string>path|types|no-default-lib|lib|name</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.tsx</string>\n                <key>match</key>\n                <string>=</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>docblock</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>constant.language.access-type.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)author)\n\\s+\n(\n  [^@\\s&lt;&gt;*/]\n  (?:[^@&lt;&gt;*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (&lt;)\n  ([^&gt;\\s]+)\n  (&gt;)\n)?</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.angle.begin.jsdoc</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>constant.other.email.link.underline.jsdoc</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.angle.end.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # &lt;that namepath&gt;\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # &lt;this namepath&gt;</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.control.jsdoc</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.example.jsdoc</string>\n            <key>begin</key>\n            <string>((@)example)\\s+</string>\n            <key>end</key>\n            <string>(?=@|\\*/)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>match</key>\n                <string>^\\s\\*\\s+</string>\n              </dict>\n              <dict>\n                <key>contentName</key>\n                <string>constant.other.description.jsdoc</string>\n                <key>begin</key>\n                <string>\\G(&lt;)caption(&gt;)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.tag.inline.jsdoc</string>\n                  </dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.begin.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.end.jsdoc</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(&lt;/)caption(&gt;)|(?=\\*/)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.tag.inline.jsdoc</string>\n                  </dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.begin.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.end.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>[^\\s@*](?:[^*]|\\*[^/])*</string>\n                <key>captures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>source.embedded.tsx</string>\n                  </dict>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>constant.language.symbol-type.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.link.underline.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>((@)typedef)\\s+(?={)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsdoctype</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n                <key>match</key>\n                <string>(?:[^@\\s*/]|\\*[^/])+</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsdoctype</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n                <key>match</key>\n                <string>([A-Za-z_$][\\w$.\\[\\]]*)</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n                <key>match</key>\n                <string>(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?&gt;\n      "(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |                      # [foo="bar"] Double-quoted\n      \'(?:(?:\\*(?!/))|(?:\\\\(?!\'))|[^*\\\\])*?\' |                      # [foo=\'bar\'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.optional-value.begin.bracket.square.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.assignment.jsdoc</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>source.embedded.tsx</string>\n                  </dict>\n                  <key>4</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.optional-value.end.bracket.square.jsdoc</string>\n                  </dict>\n                  <key>5</key>\n                  <dict>\n                    <key>name</key>\n                    <string>invalid.illegal.syntax.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsdoctype</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>contentName</key>\n            <string>variable.other.jsdoc</string>\n            <key>begin</key>\n            <string>((@)(?:default(?:value)?|license|version))\\s+(([\'\'"]))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.begin.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\3)|(?=$|\\*/)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.end.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>storage.type.class.jsdoc</string>\n            <key>match</key>\n            <string>(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#inline-tags</string>\n          </dict>\n        </array>\n      </dict>\n      <key>brackets</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>{</string>\n            <key>end</key>\n            <string>}|(?=\\*/)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#brackets</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\[</string>\n            <key>end</key>\n            <string>\\]|(?=\\*/)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#brackets</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>inline-tags</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.other.description.jsdoc</string>\n            <key>match</key>\n            <string>(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.square.begin.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.square.end.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.instance.jsdoc</string>\n            <key>begin</key>\n            <string>({)((@)(?:link(?:code|plain)?|tutorial))\\s*</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.begin.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.inline.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>}|(?=\\*/)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.end.jsdoc</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>match</key>\n                <string>\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>variable.other.link.underline.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.separator.pipe.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>variable.other.description.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.separator.pipe.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>jsdoctype</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.type.jsdoc</string>\n            <key>match</key>\n            <string>\\G{(?:[^}*]|\\*[^/}])+$</string>\n          </dict>\n          <dict>\n            <key>contentName</key>\n            <string>entity.name.type.instance.jsdoc</string>\n            <key>begin</key>\n            <string>\\G({)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.begin.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>((}))\\s*|(?=\\*/)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.end.jsdoc</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#brackets</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-without-attributes-in-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-in-expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag-without-attributes-in-expression</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;!\\+\\+|--)(?&lt;=[({\\[,?=&gt;:*]|&amp;&amp;|\\|\\||\\?|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^)\\s*(?=(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))?\\s*(&gt;))</string>\n        <key>end</key>\n        <string>(?!(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))?\\s*(&gt;))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-without-attributes</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag-without-attributes</key>\n      <dict>\n        <key>name</key>\n        <string>meta.tag.without-attributes.tsx</string>\n        <key>begin</key>\n        <string>(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))?\\s*(&gt;)</string>\n        <key>end</key>\n        <string>(&lt;/)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))?\\s*(&gt;)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.begin.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.tag.namespace.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.namespace.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.tag.tsx</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>support.class.component.tsx</string>\n          </dict>\n          <key>6</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.end.tsx</string>\n          </dict>\n        </dict>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.begin.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.tag.namespace.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.namespace.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.tag.tsx</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>support.class.component.tsx</string>\n          </dict>\n          <key>6</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.end.tsx</string>\n          </dict>\n        </dict>\n        <key>contentName</key>\n        <string>meta.jsx.children.tsx</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-children</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag-in-expression</key>\n      <dict>\n        <key>begin</key>\n        <string>(?x)\n  (?&lt;!\\+\\+|--)(?&lt;=[({\\[,?=&gt;:*]|&amp;&amp;|\\|\\||\\?|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^)\\s*\n  (?!&lt;\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=&gt;])|,)) # look ahead is not type parameter of arrow\n  (?=(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))(?=((&lt;\\s*)|(\\s+))(?!\\?)|\\/?&gt;))</string>\n        <key>end</key>\n        <string>(?!(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))(?=((&lt;\\s*)|(\\s+))(?!\\?)|\\/?&gt;))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag</key>\n      <dict>\n        <key>name</key>\n        <string>meta.tag.tsx</string>\n        <key>begin</key>\n        <string>(?=(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))(?=((&lt;\\s*)|(\\s+))(?!\\?)|\\/?&gt;))</string>\n        <key>end</key>\n        <string>(/&gt;)|(?:(&lt;/)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))?\\s*(&gt;))</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.end.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.begin.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.tag.namespace.tsx</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.namespace.tsx</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.tag.tsx</string>\n          </dict>\n          <key>6</key>\n          <dict>\n            <key>name</key>\n            <string>support.class.component.tsx</string>\n          </dict>\n          <key>7</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.tag.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(&lt;)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?&lt;!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?&lt;!\\.|-))(?=((&lt;\\s*)|(\\s+))(?!\\?)|\\/?&gt;)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.tag.begin.tsx</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.tag.namespace.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.namespace.tsx</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.tag.tsx</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.class.component.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=[/]?&gt;)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#jsx-tag-attributes</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(&gt;)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.tag.end.tsx</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=&lt;/)</string>\n            <key>contentName</key>\n            <string>meta.jsx.children.tsx</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsx-children</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-children</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-without-attributes</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-evaluated-code</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-entities</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-evaluated-code</key>\n      <dict>\n        <key>name</key>\n        <string>meta.embedded.expression.tsx</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>end</key>\n        <string>\\}</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.section.embedded.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.section.embedded.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-entities</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.character.entity.tsx</string>\n            <key>match</key>\n            <string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.entity.tsx</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.entity.tsx</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.bad-ampersand.tsx</string>\n            <key>match</key>\n            <string>&amp;</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag-attributes</key>\n      <dict>\n        <key>name</key>\n        <string>meta.tag.attributes.tsx</string>\n        <key>begin</key>\n        <string>\\s+</string>\n        <key>end</key>\n        <string>(?=[/]?&gt;)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-attribute-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-attribute-assignment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-string-double-quoted</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-string-single-quoted</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-evaluated-code</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#jsx-tag-attributes-illegal</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag-attribute-name</key>\n      <dict>\n        <key>match</key>\n        <string>(?x)\n  \\s*\n  (?:([_$a-zA-Z][-$\\w.]*)(:))?\n  ([_$a-zA-Z][-$\\w]*)\n  (?=\\s|=|/?&gt;|/\\*|//)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>entity.other.attribute-name.namespace.tsx</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.namespace.tsx</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>entity.other.attribute-name.tsx</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>jsx-tag-attribute-assignment</key>\n      <dict>\n        <key>name</key>\n        <string>keyword.operator.assignment.tsx</string>\n        <key>match</key>\n        <string>=(?=\\s*(?:\'|"|{|/\\*|//|\\n))</string>\n      </dict>\n      <key>jsx-string-double-quoted</key>\n      <dict>\n        <key>name</key>\n        <string>string.quoted.double.tsx</string>\n        <key>begin</key>\n        <string>"</string>\n        <key>end</key>\n        <string>"</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-entities</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-string-single-quoted</key>\n      <dict>\n        <key>name</key>\n        <string>string.quoted.single.tsx</string>\n        <key>begin</key>\n        <string>\'</string>\n        <key>end</key>\n        <string>\'</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.begin.tsx</string>\n          </dict>\n        </dict>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.end.tsx</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#jsx-entities</string>\n          </dict>\n        </array>\n      </dict>\n      <key>jsx-tag-attributes-illegal</key>\n      <dict>\n        <key>name</key>\n        <string>invalid.illegal.attribute.tsx</string>\n        <key>match</key>\n        <string>\\S+</string>\n      </dict>\n    </dict>\n  </dict>\n</plist>'},"../../node_modules/raw-loader/index.js!./src/embed/components/Content/Monaco/grammars/tmGrammars/css.json.tmLanguage":function(t,n){t.exports='{\n\t"information_for_contributors": [\n\t\t"This file has been converted from https://github.com/octref/language-css/blob/master/grammars/css.cson",\n\t\t"If you want to provide a fix or improvement, please create a pull request against the original repository.",\n\t\t"Once accepted there, we are happy to receive an update request."\n\t],\n\t"version": "https://github.com/octref/language-css/commit/ea1d7e3619966e47c57498913a5eabea0cce7538",\n\t"name": "CSS",\n\t"scopeName": "source.css",\n\t"patterns": [\n\t\t{\n\t\t\t"include": "#comment-block"\n\t\t},\n\t\t{\n\t\t\t"include": "#escapes"\n\t\t},\n\t\t{\n\t\t\t"include": "#combinators"\n\t\t},\n\t\t{\n\t\t\t"include": "#selector"\n\t\t},\n\t\t{\n\t\t\t"include": "#at-rules"\n\t\t},\n\t\t{\n\t\t\t"include": "#rule-list"\n\t\t}\n\t],\n\t"repository": {\n\t\t"at-rules": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\\\A(?:\\\\xEF\\\\xBB\\\\xBF)?(?i:(?=\\\\s*@charset\\\\b))",\n\t\t\t\t\t"end": ";|(?=$)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.terminator.rule.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.at-rule.charset.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.not-lowercase.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.leading-whitespace.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.no-whitespace.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"4": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.whitespace.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"5": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.not-double-quoted.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"6": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.unclosed-string.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"7": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.unexpected-characters.charset.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?x)        # Possible errors:\\n\\\\G\\n((?!@charset)@\\\\w+)   # Not lowercase (@charset is case-sensitive)\\n|\\n\\\\G(\\\\s+)             # Preceding whitespace\\n|\\n(@charset\\\\S[^;]*)    # No whitespace after @charset\\n|\\n(?<=@charset)         # Before quoted charset name\\n(\\\\x20{2,}|\\\\t+)      # More than one space used, or a tab\\n|\\n(?<=@charset\\\\x20)    # Beginning of charset name\\n([^\\";]+)              # Not double-quoted\\n|\\n(\\"[^\\"]+$)             # Unclosed quote\\n|\\n(?<=\\")                # After charset name\\n([^;]+)               # Unexpected junk instead of semicolon"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.charset.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "((@)charset)(?=\\\\s)"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "\\"",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "\\"|$",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "string.quoted.double.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"begin": "(?:\\\\G|^)(?=(?:[^\\"])+$)",\n\t\t\t\t\t\t\t\t\t"end": "$",\n\t\t\t\t\t\t\t\t\t"name": "invalid.illegal.unclosed.string.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((@)import)(?:\\\\s+|$|(?=[\'\\"]|/\\\\*))",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "keyword.control.at-rule.import.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": ";",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.terminator.rule.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.at-rule.import.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "\\\\G\\\\s*(?=/\\\\*)",\n\t\t\t\t\t\t\t"end": "(?<=\\\\*/)\\\\s*",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#string"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#url"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#media-query-list"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((@)font-face)(?=\\\\s*|{|/\\\\*|$)",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "keyword.control.at-rule.font-face.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(?!\\\\G)",\n\t\t\t\t\t"name": "meta.at-rule.font-face.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#rule-list"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(@)page(?=[\\\\s:{]|/\\\\*|$)",\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "keyword.control.at-rule.page.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(?=\\\\s*($|[:{;]))",\n\t\t\t\t\t"name": "meta.at-rule.page.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#rule-list"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?=@media(\\\\s|\\\\(|/\\\\*|$))",\n\t\t\t\t\t"end": "(?<=})(?!\\\\G)",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)\\\\G(@)media",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.media.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=\\\\s*[{;])",\n\t\t\t\t\t\t\t"name": "meta.at-rule.media.header.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#media-query-list"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "{",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.media.begin.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "}",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.media.end.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "meta.at-rule.media.body.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "$self"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?=@counter-style([\\\\s\'\\"{;]|/\\\\*|$))",\n\t\t\t\t\t"end": "(?<=})(?!\\\\G)",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)\\\\G(@)counter-style",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.counter-style.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=\\\\s*{)",\n\t\t\t\t\t\t\t"name": "meta.at-rule.counter-style.header.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"match": "(?x)\\n(?:[-a-zA-Z_]    | [^\\\\x00-\\\\x7F])     # First letter\\n(?:[-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]      # Remainder of identifier\\n  |\\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n)*",\n\t\t\t\t\t\t\t\t\t"name": "variable.parameter.style-name.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "{",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.property-list.begin.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "}",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.property-list.end.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "meta.at-rule.counter-style.body.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#rule-list-innards"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?=@document([\\\\s\'\\"{;]|/\\\\*|$))",\n\t\t\t\t\t"end": "(?<=})(?!\\\\G)",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)\\\\G(@)document",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.document.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=\\\\s*[{;])",\n\t\t\t\t\t\t\t"name": "meta.at-rule.document.header.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(url-prefix|domain|regexp)(\\\\()",\n\t\t\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "support.function.document-rule.css"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"name": "meta.function.document-rule.css",\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#string"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"match": "[^\'\\")\\\\s]+",\n\t\t\t\t\t\t\t\t\t\t\t"name": "variable.parameter.document-rule.css"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#url"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#commas"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "{",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.document.begin.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "}",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.document.end.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "meta.at-rule.document.body.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "$self"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?=@(?:-(?:webkit|moz|o|ms)-)?keyframes([\\\\s\'\\"{;]|/\\\\*|$))",\n\t\t\t\t\t"end": "(?<=})(?!\\\\G)",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)\\\\G(@)(?:-(?:webkit|moz|o|ms)-)?keyframes",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.keyframes.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=\\\\s*{)",\n\t\t\t\t\t\t\t"name": "meta.at-rule.keyframes.header.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"match": "(?x)\\n(?:[-a-zA-Z_]    | [^\\\\x00-\\\\x7F])     # First letter\\n(?:[-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]      # Remainder of identifier\\n  |\\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n)*",\n\t\t\t\t\t\t\t\t\t"name": "variable.parameter.keyframe-list.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "{",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.keyframes.begin.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "}",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.keyframes.end.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "meta.at-rule.keyframes.body.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "entity.other.keyframe-offset.css"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "entity.other.keyframe-offset.percentage.css"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"match": "(?xi)\\n(?<![\\\\w-]) (from|to) (?![\\\\w-])         # Keywords for 0% | 100%\\n|\\n([-+]?(?:\\\\d+(?:\\\\.\\\\d+)?|\\\\.\\\\d+)%)     # Percentile value"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#rule-list"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?=@supports(\\\\s|\\\\(|/\\\\*|$))",\n\t\t\t\t\t"end": "(?<=})(?!\\\\G)|(?=;)",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)\\\\G(@)supports",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.supports.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=\\\\s*[{;])",\n\t\t\t\t\t\t\t"name": "meta.at-rule.supports.header.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#feature-query-operators"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#feature-query"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "{",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.supports.begin.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "}",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.supports.end.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "meta.at-rule.supports.body.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "$self"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((@)viewport)(?=[\\\\s\'\\"{;]|/\\\\*|$)",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "keyword.control.at-rule.viewport.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(?=\\\\s*[@{;])",\n\t\t\t\t\t"name": "meta.at-rule.viewport.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((@)font-feature-values)(?=[\\\\s\'\\"{;]|/\\\\*|$)\\\\s*",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "keyword.control.at-rule.font-feature-values.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"contentName": "variable.parameter.font-name.css",\n\t\t\t\t\t"end": "(?=\\\\s*[@{;])",\n\t\t\t\t\t"name": "meta.at-rule.font-features.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#font-features"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((@)namespace)(?=[\\\\s\'\\";]|/\\\\*|$)",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "keyword.control.at-rule.namespace.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": ";|(?=[@{])",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.terminator.rule.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.at-rule.namespace.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#url"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t"name": "entity.name.function.namespace-prefix.css",\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?xi)\\n(?:\\\\G|^|(?<=\\\\s))\\n(?=\\n  (?<=\\\\s|^)                             # Starts with whitespace\\n  (?:[-a-zA-Z_]|[^\\\\x00-\\\\x7F])          # Then a valid identifier character\\n  |\\n  \\\\s*                                   # Possible adjoining whitespace\\n  /\\\\*(?:[^*]|\\\\*[^/])*\\\\*/              # Injected comment\\n)\\n(.*?)                                    # Grouped to embed #comment-block\\n(\\n  (?:[-a-zA-Z_]    | [^\\\\x00-\\\\x7F])     # First letter\\n  (?:[-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]      # Remainder of identifier\\n    |\\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n  )*\\n)"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#string"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?=@[\\\\w-]+(\\\\s|\\\\(|/\\\\*|$))",\n\t\t\t\t\t"end": "(?<=})(?!\\\\G)",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)\\\\G(@)[\\\\w-]+",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.control.at-rule.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=\\\\s*[{;])",\n\t\t\t\t\t\t\t"name": "meta.at-rule.header.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "{",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.begin.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "}",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.end.bracket.curly.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "meta.at-rule.body.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "$self"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"color-keywords": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "(?i)(?<![\\\\w-])(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)(?![\\\\w-])",\n\t\t\t\t\t"name": "support.constant.color.w3c-standard-color-name.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?xi) (?<![\\\\w-])\\n(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood\\n|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan\\n|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange\\n|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise\\n|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen\\n|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki\\n|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow\\n|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray\\n|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue\\n|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise\\n|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered\\n|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum\\n|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell\\n|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato\\n|transparent|turquoise|violet|wheat|whitesmoke|yellowgreen)\\n(?![\\\\w-])",\n\t\t\t\t\t"name": "support.constant.color.w3c-extended-color-name.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?i)(?<![\\\\w-])currentColor(?![\\\\w-])",\n\t\t\t\t\t"name": "support.constant.color.current.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?xi) (?<![\\\\w-])\\n(ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow\\n|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption\\n|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow\\n|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)\\n(?![\\\\w-])",\n\t\t\t\t\t"name": "invalid.deprecated.color.system.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"combinators": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "/deep/|>>>",\n\t\t\t\t\t"name": "invalid.deprecated.combinator.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": ">>|>|\\\\+|~",\n\t\t\t\t\t"name": "keyword.operator.combinator.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"commas": {\n\t\t\t"match": ",",\n\t\t\t"name": "punctuation.separator.list.comma.css"\n\t\t},\n\t\t"comment-block": {\n\t\t\t"begin": "/\\\\*",\n\t\t\t"beginCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.comment.begin.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "\\\\*/",\n\t\t\t"endCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.comment.end.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "comment.block.css"\n\t\t},\n\t\t"escapes": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "\\\\\\\\[0-9a-fA-F]{1,6}",\n\t\t\t\t\t"name": "constant.character.escape.codepoint.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\\\\\\\$\\\\s*",\n\t\t\t\t\t"end": "^(?<!\\\\G)",\n\t\t\t\t\t"name": "constant.character.escape.newline.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "\\\\\\\\.",\n\t\t\t\t\t"name": "constant.character.escape.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"feature-query": {\n\t\t\t"begin": "\\\\(",\n\t\t\t"beginCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.condition.begin.bracket.round.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "\\\\)",\n\t\t\t"endCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.condition.end.bracket.round.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.feature-query.css",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#feature-query-operators"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#feature-query"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"feature-query-operators": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "(?i)(?<=[\\\\s()]|^|\\\\*/)(and|not|or)(?=[\\\\s()]|/\\\\*|$)",\n\t\t\t\t\t"name": "keyword.operator.logical.feature.$1.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#rule-list-innards"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"font-features": {\n\t\t\t"begin": "(?xi)\\n((@)(annotation|character-variant|ornaments|styleset|stylistic|swash))\\n(?=[\\\\s@\'\\"{;]|/\\\\*|$)",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "keyword.control.at-rule.${3:/downcase}.css"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "punctuation.definition.keyword.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(?<=})",\n\t\t\t"name": "meta.at-rule.${3:/downcase}.css",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "{",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.property-list.begin.bracket.curly.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "}",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.property-list.end.bracket.curly.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.property-list.font-feature.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?x)\\n(?: [-a-zA-Z_]    | [^\\\\x00-\\\\x7F] )   # First letter\\n(?: [-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]     # Remainder of identifier\\n  | \\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n)*",\n\t\t\t\t\t\t\t"name": "variable.font-feature.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#rule-list-innards"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"functions": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(calc)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.calc.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.calc.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "[*/]|(?<=\\\\s|^)[-+](?=\\\\s|$)",\n\t\t\t\t\t\t\t"name": "keyword.operator.arithmetic.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(rgba?|hsla?)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.misc.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.color.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?xi) (?<![\\\\w-])\\n(\\n  (?:-webkit-|-moz-|-o-)?    # Accept prefixed/historical variants\\n  (?:repeating-)?            # \\"Repeating\\"-type gradient\\n  (?:linear|radial|conic)    # Shape\\n  -gradient\\n)\\n(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.gradient.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.gradient.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)(?<![\\\\w-])(from|to|at)(?![\\\\w-])",\n\t\t\t\t\t\t\t"name": "keyword.operator.gradient.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(-webkit-gradient)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "invalid.deprecated.gradient.function.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.gradient.invalid.deprecated.gradient.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(from|to|color-stop)(\\\\()",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "invalid.deprecated.function.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?xi) (?<![\\\\w-])\\n(annotation|attr|blur|brightness|character-variant|contrast|counters?\\n|cross-fade|drop-shadow|element|fit-content|format|grayscale|hue-rotate\\n|image-set|invert|local|minmax|opacity|ornaments|repeat|saturate|sepia\\n|styleset|stylistic|swash|symbols)\\n(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.misc.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.misc.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)(?<=[,\\\\s\\"]|\\\\*/|^)\\\\d+x(?=[\\\\s,\\"\')]|/\\\\*|$)",\n\t\t\t\t\t\t\t"name": "constant.numeric.other.density.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "[^\'\\"),\\\\s]+",\n\t\t\t\t\t\t\t"name": "variable.parameter.misc.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(circle|ellipse|inset|polygon|rect)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.shape.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.shape.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)(?<=\\\\s|^|\\\\*/)(at|round)(?=\\\\s|/\\\\*|$)",\n\t\t\t\t\t\t\t"name": "keyword.operator.shape.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(cubic-bezier|steps)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.timing-function.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.timing-function.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)(?<![\\\\w-])(start|end)(?=\\\\s*\\\\)|$)",\n\t\t\t\t\t\t\t"name": "support.constant.step-direction.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?xi) (?<![\\\\w-])\\n( (?:translate|scale|rotate)(?:[XYZ]|3D)?\\n| matrix(?:3D)?\\n| skew[XY]?\\n| perspective\\n)\\n(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.transform.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#url"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)(?<![\\\\w-])(var)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "support.function.misc.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.function.variable.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"name": "variable.argument.css",\n\t\t\t\t\t\t\t"match": "(?x)\\n--\\n(?:[-a-zA-Z_]    | [^\\\\x00-\\\\x7F])     # First letter\\n(?:[-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]      # Remainder of identifier\\n  |\\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n)*"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"functional-pseudo-classes": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((:)dir)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "entity.other.attribute-name.pseudo-class.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)(?<![\\\\w-])(ltr|rtl)(?![\\\\w-])",\n\t\t\t\t\t\t\t"name": "support.constant.text-direction.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((:)lang)(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "entity.other.attribute-name.pseudo-class.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?<=[(,\\\\s])[a-zA-Z]+(-[a-zA-Z0-9]*|\\\\\\\\(?:[0-9a-fA-F]{1,6}|.))*(?=[),\\\\s])",\n\t\t\t\t\t\t\t"name": "support.constant.language-range.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "\\"",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "\\"",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "string.quoted.double.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"match": "(?<=[\\"\\\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=[\\"\\\\s])",\n\t\t\t\t\t\t\t\t\t"name": "support.constant.language-range.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "\'",\n\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "\'",\n\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"name": "string.quoted.single.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"match": "(?<=[\'\\\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=[\'\\\\s])",\n\t\t\t\t\t\t\t\t\t"name": "support.constant.language-range.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#commas"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((:)(?:not|has|matches))(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "entity.other.attribute-name.pseudo-class.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#selector-innards"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i)((:)nth-(?:last-)?(?:child|of-type))(\\\\()",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "entity.other.attribute-name.pseudo-class.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)[+-]?(\\\\d+n?|n)(\\\\s*[+-]\\\\s*\\\\d+)?",\n\t\t\t\t\t\t\t"name": "constant.numeric.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "(?i)even|odd",\n\t\t\t\t\t\t\t"name": "support.constant.parity.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"media-features": {\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "support.type.property-name.media.css"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "invalid.deprecated.media.css"\n\t\t\t\t},\n\t\t\t\t"3": {\n\t\t\t\t\t"name": "support.type.vendored.property-name.media.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"match": "(?xi)\\n(?<=^|\\\\s|\\\\(|\\\\*/)           # Preceded by whitespace, bracket or comment\\n(?:\\n  # Standardised features\\n  (\\n    (?:min-|max-)?            # Range features\\n    (?: height\\n      | width\\n      | aspect-ratio\\n      | color\\n      | color-index\\n      | monochrome\\n      | resolution\\n    )\\n    | grid                    # Discrete features\\n    | scan\\n    | orientation\\n    | display-mode\\n  )\\n  |\\n  # Deprecated features\\n  (\\n    (?:min-|max-)?            # Deprecated in Media Queries 4\\n    device-\\n    (?: height\\n      | width\\n      | aspect-ratio\\n    )\\n  )\\n  |\\n  # Vendor extensions\\n  (\\n    (?:\\n      # Spec-compliant syntax\\n      [-_]\\n      (?: webkit              # Webkit/Blink\\n        | apple|khtml         # Webkit aliases\\n        | epub                # ePub3\\n        | moz                 # Gecko\\n        | ms                  # Microsoft\\n        | o                   # Presto (pre-Opera 15)\\n        | xv|ah|rim|atsc|     # Less common vendors\\n          hp|tc|wap|ro\\n      )\\n      |\\n      # Non-standard prefixes\\n      (?: mso                 # Microsoft Office\\n        | prince              # YesLogic\\n      )\\n    )\\n    -\\n    [\\\\w-]+                   # Feature name\\n    (?=                       # Terminates correctly\\n      \\\\s*                    # Possible whitespace\\n      (?:                     # Possible injected comment\\n        /\\\\*\\n        (?:[^*]|\\\\*[^/])*\\n        \\\\*/\\n      )?\\n      \\\\s*\\n      [:)]                    # Ends with a colon or closed bracket\\n    )\\n  )\\n)\\n(?=\\\\s|$|[><:=]|\\\\)|/\\\\*)     # Terminates cleanly"\n\t\t},\n\t\t"media-feature-keywords": {\n\t\t\t"match": "(?xi)\\n(?<=^|\\\\s|:|\\\\*/)\\n(?: portrait                  # Orientation\\n  | landscape\\n  | progressive               # Scan types\\n  | interlace\\n  | fullscreen                # Display modes\\n  | standalone\\n  | minimal-ui\\n  | browser\\n)\\n(?=\\\\s|\\\\)|$)",\n\t\t\t"name": "support.constant.property-value.css"\n\t\t},\n\t\t"media-query": {\n\t\t\t"begin": "\\\\G",\n\t\t\t"end": "(?=\\\\s*[{;])",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#escapes"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#media-types"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?i)(?<=\\\\s|^|,|\\\\*/)(only|not)(?=\\\\s|{|/\\\\*|$)",\n\t\t\t\t\t"name": "keyword.operator.logical.$1.media.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?i)(?<=\\\\s|^|\\\\*/|\\\\))and(?=\\\\s|/\\\\*|$)",\n\t\t\t\t\t"name": "keyword.operator.logical.and.media.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": ",(?:(?:\\\\s*,)+|(?=\\\\s*[;){]))",\n\t\t\t\t\t"name": "invalid.illegal.comma.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#commas"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\\\(",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.parameters.begin.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.parameters.end.bracket.round.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#media-features"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#media-feature-keywords"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": ":",\n\t\t\t\t\t\t\t"name": "punctuation.separator.key-value.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": ">=|<=|=|<|>",\n\t\t\t\t\t\t\t"name": "keyword.operator.comparison.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "constant.numeric.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t"name": "keyword.operator.arithmetic.css"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t\t\t"name": "constant.numeric.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(\\\\d+)\\\\s*(/)\\\\s*(\\\\d+)",\n\t\t\t\t\t\t\t"name": "meta.ratio.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#numeric-values"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"media-query-list": {\n\t\t\t"begin": "(?=\\\\s*[^{;])",\n\t\t\t"end": "(?=\\\\s*[{;])",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#media-query"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"media-types": {\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "support.constant.media.css"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "invalid.deprecated.constant.media.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"match": "(?xi)\\n(?<=^|\\\\s|,|\\\\*/)\\n(?:\\n  # Valid media types\\n  (all|print|screen|speech)\\n  |\\n  # Deprecated in Media Queries 4: http://dev.w3.org/csswg/mediaqueries/#media-types\\n  (aural|braille|embossed|handheld|projection|tty|tv)\\n)\\n(?=$|[{,\\\\s;]|/\\\\*)"\n\t\t},\n\t\t"numeric-values": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.constant.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(#)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\\\b",\n\t\t\t\t\t"name": "constant.other.color.rgb-value.hex.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "keyword.other.unit.percentage.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "keyword.other.unit.${2:/downcase}.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(?xi) (?<![\\\\w-])\\n[-+]?                               # Sign indicator\\n\\n(?:                                 # Numerals\\n    [0-9]+ (?:\\\\.[0-9]+)?           # Integer/float with leading digits\\n  | \\\\.[0-9]+                       # Float without leading digits\\n)\\n\\n(?:                                 # Scientific notation\\n  (?<=[0-9])                        # Exponent must follow a digit\\n  E                                 # Exponent indicator\\n  [-+]?                             # Possible sign indicator\\n  [0-9]+                            # Exponent value\\n)?\\n\\n(?:                                 # Possible unit for data-type:\\n  (%)                               # - Percentage\\n  | ( deg|grad|rad|turn             # - Angle\\n    | Hz|kHz                        # - Frequency\\n    | ch|cm|em|ex|fr|in|mm|mozmm|   # - Length\\n      pc|pt|px|q|rem|vh|vmax|vmin|\\n      vw\\n    | dpi|dpcm|dppx                 # - Resolution\\n    | s|ms                          # - Time\\n    )\\n  \\\\b                               # Boundary checking intentionally lax to\\n)?                                  # facilitate embedding in CSS-like grammars",\n\t\t\t\t\t"name": "constant.numeric.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"property-keywords": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "(?xi) (?<![\\\\w-])\\n(above|absolute|active|add|additive|after-edge|alias|all|all-petite-caps|all-scroll|all-small-caps|alpha|alphabetic|alternate|alternate-reverse\\n|always|antialiased|auto|auto-pos|available|avoid|avoid-column|avoid-page|avoid-region|backwards|balance|baseline|before-edge|below|bevel\\n|bidi-override|blink|block|block-axis|block-start|block-end|bold|bolder|border|border-box|both|bottom|bottom-outside|break-all|break-word|bullets\\n|butt|capitalize|caption|cell|center|central|char|circle|clip|clone|close-quote|closest-corner|closest-side|col-resize|collapse|color|color-burn\\n|color-dodge|column|column-reverse|common-ligatures|compact|condensed|contain|content|content-box|contents|context-menu|contextual|copy|cover\\n|crisp-edges|crispEdges|crosshair|cyclic|darken|dashed|decimal|default|dense|diagonal-fractions|difference|digits|disabled|disc|discretionary-ligatures\\n|distribute|distribute-all-lines|distribute-letter|distribute-space|dot|dotted|double|double-circle|downleft|downright|e-resize|each-line|ease|ease-in\\n|ease-in-out|ease-out|economy|ellipse|ellipsis|embed|end|evenodd|ew-resize|exact|exclude|exclusion|expanded|extends|extra-condensed|extra-expanded\\n|fallback|farthest-corner|farthest-side|fill|fill-available|fill-box|filled|fit-content|fixed|flat|flex|flex-end|flex-start|flip|forwards|freeze\\n|from-image|full-width|geometricPrecision|georgian|grab|grabbing|grayscale|grid|groove|hand|hanging|hard-light|help|hidden|hide\\n|historical-forms|historical-ligatures|horizontal|horizontal-tb|hue|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space\\n|ideographic|inactive|infinite|inherit|initial|inline|inline-axis|inline-block|inline-end|inline-flex|inline-grid|inline-list-item|inline-start\\n|inline-table|inset|inside|inter-character|inter-ideograph|inter-word|intersect|invert|isolate|isolate-override|italic|jis04|jis78|jis83\\n|jis90|justify|justify-all|kannada|keep-all|landscape|large|larger|left|lighten|lighter|line|line-edge|line-through|linear|linearRGB\\n|lining-nums|list-item|local|loose|lowercase|lr|lr-tb|ltr|luminance|luminosity|main-size|mandatory|manipulation|manual|margin-box|match-parent\\n|match-source|mathematical|max-content|medium|menu|message-box|middle|min-content|miter|mixed|move|multiply|n-resize|narrower|ne-resize\\n|nearest-neighbor|nesw-resize|newspaper|no-change|no-clip|no-close-quote|no-common-ligatures|no-contextual|no-discretionary-ligatures\\n|no-drop|no-historical-ligatures|no-open-quote|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|numbers|numeric|nw-resize|nwse-resize\\n|oblique|oldstyle-nums|open|open-quote|optimizeLegibility|optimizeQuality|optimizeSpeed|optional|ordinal|outset|outside|over|overlay|overline|padding\\n|padding-box|page|painted|pan-down|pan-left|pan-right|pan-up|pan-x|pan-y|paused|petite-caps|pixelated|plaintext|pointer|portrait|pre|pre-line\\n|pre-wrap|preserve-3d|progress|progressive|proportional-nums|proportional-width|proximity|radial|recto|region|relative|remove|repeat|repeat-[xy]\\n|reset-size|reverse|revert|ridge|right|rl|rl-tb|round|row|row-resize|row-reverse|row-severse|rtl|ruby|ruby-base|ruby-base-container|ruby-text\\n|ruby-text-container|run-in|running|s-resize|saturation|scale-down|screen|scroll|scroll-position|se-resize|semi-condensed|semi-expanded|separate\\n|sesame|show|sideways|sideways-left|sideways-lr|sideways-right|sideways-rl|simplified|slashed-zero|slice|small|small-caps|small-caption|smaller\\n|smooth|soft-light|solid|space|space-around|space-between|space-evenly|spell-out|square|sRGB|stacked-fractions|start|static|status-bar|swap\\n|step-end|step-start|sticky|stretch|strict|stroke|stroke-box|style|sub|subgrid|subpixel-antialiased|subtract|super|sw-resize|symbolic|table\\n|table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|tabular-nums|tb|tb-rl\\n|text|text-after-edge|text-before-edge|text-bottom|text-top|thick|thin|titling-caps|top|top-outside|touch|traditional|transparent|triangle\\n|ultra-condensed|ultra-expanded|under|underline|unicase|unset|upleft|uppercase|upright|use-glyph-orientation|use-script|verso|vertical\\n|vertical-ideographic|vertical-lr|vertical-rl|vertical-text|view-box|visible|visibleFill|visiblePainted|visibleStroke|w-resize|wait|wavy\\n|weight|whitespace|wider|words|wrap|wrap-reverse|x-large|x-small|xx-large|xx-small|zero|zoom-in|zoom-out)\\n(?![\\\\w-])",\n\t\t\t\t\t"name": "support.constant.property-value.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?xi) (?<![\\\\w-])\\n(arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|cjk-ideographic\\n|decimal|decimal-leading-zero|devanagari|disc|disclosure-closed|disclosure-open|ethiopic-halehame-am\\n|ethiopic-halehame-ti-e[rt]|ethiopic-numeric|georgian|gujarati|gurmukhi|hangul|hangul-consonant|hebrew\\n|hiragana|hiragana-iroha|japanese-formal|japanese-informal|kannada|katakana|katakana-iroha|khmer\\n|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek\\n|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal\\n|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian\\n|upper-latin|upper-roman|urdu)\\n(?![\\\\w-])",\n\t\t\t\t\t"name": "support.constant.property-value.list-style-type.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?<![\\\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+",\n\t\t\t\t\t"name": "support.constant.vendored.property-value.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?<![\\\\w-])(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace)(?![\\\\w-])",\n\t\t\t\t\t"name": "support.constant.font-name.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"property-names": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "(?xi) (?<![\\\\w-])\\n(?:\\n    # Standard CSS\\n    additive-symbols|align-content|align-items|align-self|all|animation|animation-delay|animation-direction\\n  | animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state\\n  | animation-timing-function|backface-visibility|background|background-attachment|background-blend-mode\\n  | background-clip|background-color|background-image|background-origin|background-position|background-position-[xy]\\n  | background-repeat|background-size|block-size|border|border-block-end|border-block-end-color|border-block-end-style\\n  | border-block-end-width|border-block-start|border-block-start-color|border-block-start-style\\n  | border-block-start-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius\\n  | border-bottom-style|border-bottom-width|border-collapse|border-color|border-image|border-image-outset\\n  | border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline-end\\n  | border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start\\n  | border-inline-start-color|border-inline-start-style|border-inline-start-width|border-left|border-left-color\\n  | border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style\\n  | border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius\\n  | border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break\\n  | box-shadow|box-sizing|break-after|break-before|break-inside|caption-side|clear|clip|clip-path|color\\n  | column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width\\n  | column-span|column-width|columns|content|counter-increment|counter-reset|cursor|direction|display\\n  | empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float\\n  | font|font-display|font-family|font-feature-settings|font-kerning|font-language-override|font-size|font-size-adjust\\n  | font-stretch|font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps\\n  | font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-weight\\n  | grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap\\n  | grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas\\n  | grid-template-columns|grid-template-rows|height|hyphens|image-orientation|image-rendering|image-resolution\\n  | ime-mode|inline-size|isolation|justify-content|left|letter-spacing|line-break|line-height|list-style\\n  | list-style-image|list-style-position|list-style-type|margin|margin-block-end|margin-block-start|margin-bottom\\n  | margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|mask|mask-clip|mask-composite\\n  | mask-image|mask-mode|mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-block-size|max-height\\n  | max-inline-size|max-width|max-zoom|min-block-size|min-height|min-inline-size|min-width|min-zoom|mix-blend-mode\\n  | negative|object-fit|object-position|offset-block-end|offset-block-start|offset-inline-end|offset-inline-start\\n  | opacity|order|orientation|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow\\n  | overflow-wrap|overflow-[xy]|pad|padding|padding-block-end|padding-block-start|padding-bottom|padding-inline-end\\n  | padding-inline-start|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside\\n  | perspective|perspective-origin|pointer-events|position|prefix|quotes|range|resize|right|ruby-align|ruby-merge\\n  | ruby-position|scroll-behavior|scroll-snap-coordinate|scroll-snap-destination|scroll-snap-type|shape-image-threshold\\n  | shape-margin|shape-outside|speak-as|src|suffix|symbols|system|tab-size|table-layout|text-align|text-align-last\\n  | text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-style|text-emphasis\\n  | text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-orientation|text-overflow\\n  | text-rendering|text-shadow|text-transform|text-underline-position|top|touch-action|transform|transform-box\\n  | transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property\\n  | transition-timing-function|unicode-bidi|unicode-range|user-zoom|vertical-align|visibility|white-space|widows\\n  | width|will-change|word-break|word-spacing|word-wrap|writing-mode|z-index|zoom\\n\\n  # SVG attributes\\n  | alignment-baseline|baseline-shift|clip-rule|color-interpolation|color-interpolation-filters|color-profile\\n  | color-rendering|cx|cy|dominant-baseline|enable-background|fill|fill-opacity|fill-rule|flood-color|flood-opacity\\n  | glyph-orientation-horizontal|glyph-orientation-vertical|height|kerning|lighting-color|marker-end|marker-mid\\n  | marker-start|r|rx|ry|shape-rendering|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap\\n  | stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|text-anchor|width|x|y\\n\\n  # Not listed on MDN; presumably deprecated\\n  | adjust|after|align|align-last|alignment|alignment-adjust|appearance|attachment|azimuth|background-break\\n  | balance|baseline|before|bidi|binding|bookmark|bookmark-label|bookmark-level|bookmark-target|border-length\\n  | bottom-color|bottom-left-radius|bottom-right-radius|bottom-style|bottom-width|box|box-align|box-direction\\n  | box-flex|box-flex-group|box-lines|box-ordinal-group|box-orient|box-pack|break|character|collapse|column\\n  | column-break-after|column-break-before|count|counter|crop|cue|cue-after|cue-before|decoration|decoration-break\\n  | delay|display-model|display-role|down|drop|drop-initial-after-adjust|drop-initial-after-align|drop-initial-before-adjust\\n  | drop-initial-before-align|drop-initial-size|drop-initial-value|duration|elevation|emphasis|family|fit|fit-position\\n  | flex-group|float-offset|gap|grid-columns|grid-rows|hanging-punctuation|header|hyphenate|hyphenate-after|hyphenate-before\\n  | hyphenate-character|hyphenate-lines|hyphenate-resource|icon|image|increment|indent|index|initial-after-adjust\\n  | initial-after-align|initial-before-adjust|initial-before-align|initial-size|initial-value|inline-box-align|iteration-count\\n  | justify|label|left-color|left-style|left-width|length|level|line|line-stacking|line-stacking-ruby|line-stacking-shift\\n  | line-stacking-strategy|lines|list|mark|mark-after|mark-before|marks|marquee|marquee-direction|marquee-play-count|marquee-speed\\n  | marquee-style|max|min|model|move-to|name|nav|nav-down|nav-index|nav-left|nav-right|nav-up|new|numeral|offset|ordinal-group\\n  | orient|origin|overflow-style|overhang|pack|page|page-policy|pause|pause-after|pause-before|phonemes|pitch|pitch-range\\n  | play-count|play-during|play-state|point|presentation|presentation-level|profile|property|punctuation|punctuation-trim\\n  | radius|rate|rendering-intent|repeat|replace|reset|resolution|resource|respond-to|rest|rest-after|rest-before|richness\\n  | right-color|right-style|right-width|role|rotation|rotation-point|rows|ruby|ruby-overhang|ruby-span|rule|rule-color\\n  | rule-style|rule-width|shadow|size|size-adjust|sizing|space|space-collapse|spacing|span|speak|speak-header|speak-numeral\\n  | speak-punctuation|speech|speech-rate|speed|stacking|stacking-ruby|stacking-shift|stacking-strategy|stress|stretch\\n  | string-set|style|style-image|style-position|style-type|target|target-name|target-new|target-position|text|text-height\\n  | text-justify|text-outline|text-replace|text-wrap|timing-function|top-color|top-left-radius|top-right-radius|top-style\\n  | top-width|trim|unicode|up|user-select|variant|voice|voice-balance|voice-duration|voice-family|voice-pitch|voice-pitch-range\\n  | voice-rate|voice-stress|voice-volume|volume|weight|white|white-space-collapse|word|wrap\\n)\\n(?![\\\\w-])",\n\t\t\t\t\t"name": "support.type.property-name.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?<![\\\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+",\n\t\t\t\t\t"name": "support.type.vendored.property-name.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"property-values": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#commas"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#escapes"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#functions"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#property-keywords"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#unicode-range"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#numeric-values"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#color-keywords"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#string"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "!\\\\s*important(?![\\\\w-])",\n\t\t\t\t\t"name": "keyword.other.important.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"pseudo-classes": {\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "invalid.illegal.colon.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"match": "(?xi)\\n(:)(:*)\\n(?: active|any-link|checked|default|defined|disabled|empty|enabled|first\\n  | (?:first|last|only)-(?:child|of-type)|focus|focus-visible|focus-within\\n  | fullscreen|host|hover|in-range|indeterminate|invalid|left|link\\n  | optional|out-of-range|placeholder-shown|read-only|read-write\\n  | required|right|root|scope|target|unresolved\\n  | valid|visited\\n)(?![\\\\w-]|\\\\s*[;}])",\n\t\t\t"name": "entity.other.attribute-name.pseudo-class.css"\n\t\t},\n\t\t"pseudo-elements": {\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"match": "(?xi)\\n(?:\\n  (::?)                       # Elements using both : and :: notation\\n  (?: after\\n    | before\\n    | first-letter\\n    | first-line\\n    | (?:-(?:ah|apple|atsc|epub|hp|khtml|moz\\n            |ms|o|rim|ro|tc|wap|webkit|xv)\\n        | (?:mso|prince))\\n      -[a-z-]+\\n  )\\n  |\\n  (::)                        # Double-colon only\\n  (?: backdrop\\n    | content\\n    | grammar-error\\n    | marker\\n    | placeholder\\n    | selection\\n    | shadow\\n    | spelling-error\\n  )\\n)\\n(?![\\\\w-]|\\\\s*[;}])",\n\t\t\t"name": "entity.other.attribute-name.pseudo-element.css"\n\t\t},\n\t\t"rule-list": {\n\t\t\t"begin": "{",\n\t\t\t"beginCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.section.property-list.begin.bracket.curly.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "}",\n\t\t\t"endCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.section.property-list.end.bracket.curly.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.property-list.css",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#rule-list-innards"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"rule-list-innards": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#escapes"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#font-features"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?x) (?<![\\\\w-])\\n--\\n(?:[-a-zA-Z_]    | [^\\\\x00-\\\\x7F])     # First letter\\n(?:[-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]      # Remainder of identifier\\n  |\\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n)*",\n\t\t\t\t\t"name": "variable.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?<![-a-zA-Z])(?=[-a-zA-Z])",\n\t\t\t\t\t"end": "$|(?![-a-zA-Z])",\n\t\t\t\t\t"name": "meta.property-name.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-names"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "(:)\\\\s*",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.separator.key-value.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\s*(;)|\\\\s*(?=}|\\\\))",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.terminator.rule.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"contentName": "meta.property-value.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#property-values"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": ";",\n\t\t\t\t\t"name": "punctuation.terminator.rule.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"selector": {\n\t\t\t"begin": "(?x)\\n(?=\\n  (?:\\\\|)?                    # Possible anonymous namespace prefix\\n  (?:\\n    [-\\\\[:.*\\\\#a-zA-Z_]       # Valid selector character\\n    |\\n    [^\\\\x00-\\\\x7F]            # Which can include non-ASCII symbols\\n    |\\n    \\\\\\\\                      # Or an escape sequence\\n    (?:[0-9a-fA-F]{1,6}|.)\\n  )\\n)",\n\t\t\t"end": "(?=\\\\s*[/@{)])",\n\t\t\t"name": "meta.selector.css",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#selector-innards"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"selector-innards": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#commas"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#escapes"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#combinators"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "entity.other.namespace-prefix.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.separator.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(?x)\\n(?:^|(?<=[\\\\s,(};]))         # Follows whitespace, comma, semicolon, or bracket\\n(?!\\n  [-\\\\w*]+\\n  \\\\|\\n  (?!\\n      [-\\\\[:.*\\\\#a-zA-Z_]    # Make sure there\'s a selector to match\\n    | [^\\\\x00-\\\\x7F]\\n  )\\n)\\n(\\n  (?: [-a-zA-Z_]    | [^\\\\x00-\\\\x7F] )   # First letter\\n  (?: [-a-zA-Z0-9_] | [^\\\\x00-\\\\x7F]     # Remainder of identifier\\n    | \\\\\\\\(?:[0-9a-fA-F]{1,6}|.)\\n  )*\\n  |\\n  \\\\*     # Universal namespace\\n)?\\n(\\\\|)     # Namespace separator"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-names"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "\\\\*",\n\t\t\t\t\t"name": "entity.name.tag.wildcard.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(?x) (?<![@\\\\w-])\\n([.\\\\#])\\n# Invalid identifier\\n(\\n  (?:\\n    # Starts with ASCII digits, with possible hyphen preceding it\\n    -?[0-9]\\n    |\\n    # Consists of a hyphen only\\n    -                                      # Terminated by either:\\n    (?= $                                  # - End-of-line\\n      | [\\\\s,.\\\\#)\\\\[:{>+~|]               # - Followed by another selector\\n      | /\\\\*                               # - Followed by a block comment\\n    )\\n    |\\n    # Name contains unescaped ASCII symbol\\n    (?:                                    # Check for acceptable preceding characters\\n        [-a-zA-Z_0-9]|[^\\\\x00-\\\\x7F]       # - Valid selector character\\n      | \\\\\\\\(?:[0-9a-fA-F]{1,6}|.)         # - Escape sequence\\n    )*\\n    (?:                                    # Invalid punctuation\\n      [!\\"\'%&(*;<?@^`|\\\\]}]                 # - NOTE: We exempt `)` from the list of checked\\n      |                                    #   symbols to avoid matching `:not(.invalid)`\\n      / (?!\\\\*)                            # - Avoid invalidating the start of a comment\\n    )+\\n  )\\n  # Mark remainder of selector invalid\\n  (?: [-a-zA-Z_0-9]|[^\\\\x00-\\\\x7F]         # - Otherwise valid identifier characters\\n    | \\\\\\\\(?:[0-9a-fA-F]{1,6}|.)           # - Escape sequence\\n  )*\\n)",\n\t\t\t\t\t"name": "invalid.illegal.bad-identifier.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(?x)\\n(\\\\.)                                  # Valid class-name\\n(\\n  (?: [-a-zA-Z_0-9]|[^\\\\x00-\\\\x7F]     # Valid identifier characters\\n    | \\\\\\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\\n  )+\\n)                                      # Followed by either:\\n(?= $                                  # - End of the line\\n  | [\\\\s,.\\\\#)\\\\[:{>+~|]               # - Another selector\\n  | /\\\\*                               # - A block comment\\n)",\n\t\t\t\t\t"name": "entity.other.attribute-name.class.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(?x)\\n(\\\\#)\\n(\\n  -?\\n  (?![0-9])\\n  (?:[-a-zA-Z0-9_]|[^\\\\x00-\\\\x7F]|\\\\\\\\(?:[0-9a-fA-F]{1,6}|.))+\\n)\\n(?=$|[\\\\s,.\\\\#)\\\\[:{>+~|]|/\\\\*)",\n\t\t\t\t\t"name": "entity.other.attribute-name.id.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\\\[",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.begin.bracket.square.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\\\]",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.end.bracket.square.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.attribute-selector.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#string"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "storage.modifier.ignore-case.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?<=[\\"\'\\\\s]|^|\\\\*/)\\\\s*([iI])\\\\s*(?=[\\\\s\\\\]]|/\\\\*|$)"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "string.unquoted.attribute-value.css",\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?x)(?<==)\\\\s*((?!/\\\\*)(?:[^\\\\\\\\\\"\'\\\\s\\\\]]|\\\\\\\\.)+)"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "[~|^$*]?=",\n\t\t\t\t\t\t\t"name": "keyword.operator.pattern.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "\\\\|",\n\t\t\t\t\t\t\t"name": "punctuation.separator.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "entity.other.namespace-prefix.css",\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?x)\\n# Qualified namespace prefix\\n( -?(?!\\\\d)(?:[\\\\w-]|[^\\\\x00-\\\\x7F]|\\\\\\\\(?:[0-9a-fA-F]{1,6}|.))+\\n| \\\\*\\n)\\n# Lookahead to ensure there\'s a valid identifier ahead\\n(?=\\n  \\\\| (?!\\\\s|=|$|\\\\])\\n  (?: -?(?!\\\\d)\\n   |   [\\\\\\\\\\\\w-]\\n   |   [^\\\\x00-\\\\x7F]\\n   )\\n)"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "entity.other.attribute-name.css",\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"match": "(?x)\\n(-?(?!\\\\d)(?>[\\\\w-]|[^\\\\x00-\\\\x7F]|\\\\\\\\(?:[0-9a-fA-F]{1,6}|.))+)\\n\\\\s*\\n(?=[~|^\\\\]$*=]|/\\\\*)"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#pseudo-classes"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#pseudo-elements"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#functional-pseudo-classes"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(?x) (?<![@\\\\w-])\\n(?=            # Custom element names must:\\n  [a-z]        # - start with a lowercase ASCII letter,\\n  \\\\w* -       # - contain at least one dash\\n)\\n(?:\\n  (?![A-Z])    # No uppercase ASCII letters are allowed\\n  [\\\\w-]       # Allow any other word character or dash\\n)+\\n(?![(\\\\w-])",\n\t\t\t\t\t"name": "entity.name.tag.custom.css"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"string": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\"",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\\"|(?<!\\\\\\\\)(?=$|\\\\n)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "string.quoted.double.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?:\\\\G|^)(?=(?:[^\\\\\\\\\\"]|\\\\\\\\.)+$)",\n\t\t\t\t\t\t\t"end": "$",\n\t\t\t\t\t\t\t"name": "invalid.illegal.unclosed.string.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "\'",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "\'|(?<!\\\\\\\\)(?=$|\\\\n)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.css"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "string.quoted.single.css",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?:\\\\G|^)(?=(?:[^\\\\\\\\\']|\\\\\\\\.)+$)",\n\t\t\t\t\t\t\t"end": "$",\n\t\t\t\t\t\t\t"name": "invalid.illegal.unclosed.string.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#escapes"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"tag-names": {\n\t\t\t"match": "(?xi) (?<![\\\\w:-])\\n(?:\\n    # HTML\\n    a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound\\n  | big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command\\n  | content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|element|em|embed|fieldset\\n  | figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i\\n  | iframe|image|img|input|ins|isindex|kbd|keygen|label|legend|li|link|listing|main|map|mark\\n  | marquee|math|menu|menuitem|meta|meter|multicol|nav|nextid|nobr|noembed|noframes|noscript\\n  | object|ol|optgroup|option|output|p|param|picture|plaintext|pre|progress|q|rb|rp|rt|rtc\\n  | ruby|s|samp|script|section|select|shadow|slot|small|source|spacer|span|strike|strong\\n  | style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr\\n  | track|tt|u|ul|var|video|wbr|xmp\\n\\n  # SVG\\n  | altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform\\n  | circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix\\n  | feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap\\n  | feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur\\n  | feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting\\n  | feSpotLight|feTile|feTurbulence|filter|font-face|font-face-format|font-face-name\\n  | font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern\\n  | line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata\\n  | missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor\\n  | stop|svg|switch|symbol|text|textPath|tref|tspan|use|view|vkern\\n\\n  # MathML\\n  | annotation|annotation-xml|maction|maligngroup|malignmark|math|menclose|merror|mfenced\\n  | mfrac|mglyph|mi|mlabeledtr|mlongdiv|mmultiscripts|mn|mo|mover|mpadded|mphantom|mroot\\n  | mrow|ms|mscarries|mscarry|msgroup|msline|mspace|msqrt|msrow|mstack|mstyle|msub|msubsup\\n  | msup|mtable|mtd|mtext|mtr|munder|munderover|semantics\\n)\\n(?=[+~>\\\\s,.\\\\#|){:\\\\[]|/\\\\*|$)",\n\t\t\t"name": "entity.name.tag.css"\n\t\t},\n\t\t"unicode-range": {\n\t\t\t"captures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "constant.other.unicode-range.css"\n\t\t\t\t},\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.separator.dash.unicode-range.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"match": "(?<![\\\\w-])[Uu]\\\\+[0-9A-Fa-f?]{1,6}(?:(-)[0-9A-Fa-f]{1,6})?(?![\\\\w-])"\n\t\t},\n\t\t"url": {\n\t\t\t"begin": "(?i)(?<![\\\\w@-])(url)(\\\\()",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "support.function.url.css"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "punctuation.section.function.begin.bracket.round.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "\\\\)",\n\t\t\t"endCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.section.function.end.bracket.round.css"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.function.url.css",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "[^\'\\")\\\\s]+",\n\t\t\t\t\t"name": "variable.parameter.url.css"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#string"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#comment-block"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#escapes"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}'},"../../node_modules/raw-loader/index.js!./src/embed/components/Content/Monaco/grammars/tmGrammars/html.json.tmLanguage":function(t,n){t.exports='{\n\t"information_for_contributors": [\n\t\t"This file has been converted from https://github.com/textmate/html.tmbundle/blob/master/Syntaxes/HTML.plist",\n\t\t"If you want to provide a fix or improvement, please create a pull request against the original repository.",\n\t\t"Once accepted there, we are happy to receive an update request."\n\t],\n\t"version": "https://github.com/textmate/html.tmbundle/commit/a723f08ebd49c67c22aca08dd8f17d0bf836ec93",\n\t"name": "HTML",\n\t"scopeName": "text.html.basic",\n\t"injections": {\n\t\t"R:text.html - (comment.block, text.html source)": {\n\t\t\t"comment": "Use R: to ensure this matches after any other injections.",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "<",\n\t\t\t\t\t"name": "invalid.illegal.bad-angle-bracket.html"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t"patterns": [\n\t\t{\n\t\t\t"begin": "(<)([a-zA-Z][a-zA-Z0-9:-]*)(?=[^>]*></\\\\2>)",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "entity.name.tag.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(>(<)/)(\\\\2)(>)",\n\t\t\t"endCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "meta.scope.between-tag-pair.html"\n\t\t\t\t},\n\t\t\t\t"3": {\n\t\t\t\t\t"name": "entity.name.tag.html"\n\t\t\t\t},\n\t\t\t\t"4": {\n\t\t\t\t\t"name": "punctuation.definition.tag.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.tag.any.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "(<\\\\?)(xml)",\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "entity.name.tag.xml.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(\\\\?>)",\n\t\t\t"name": "meta.tag.preprocessor.xml.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-generic-attribute"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#string-double-quoted"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#string-single-quoted"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "\x3c!--",\n\t\t\t"captures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.comment.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "--\\\\s*>",\n\t\t\t"name": "comment.block.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"match": "--",\n\t\t\t\t\t"name": "invalid.illegal.bad-comments-or-CDATA.html"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "<!",\n\t\t\t"captures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.tag.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": ">",\n\t\t\t"name": "meta.tag.sgml.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "(?i:DOCTYPE)",\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "entity.name.tag.doctype.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(?=>)",\n\t\t\t\t\t"name": "meta.tag.sgml.doctype.html",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"match": "\\"[^\\">]*\\"",\n\t\t\t\t\t\t\t"name": "string.quoted.double.doctype.identifiers-and-DTDs.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\\\[CDATA\\\\[",\n\t\t\t\t\t"end": "]](?=>)",\n\t\t\t\t\t"name": "constant.other.inline-data.html"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "(\\\\s*)(?!--|>)\\\\S(\\\\s*)",\n\t\t\t\t\t"name": "invalid.illegal.bad-comments-or-CDATA.html"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"include": "#embedded-code"\n\t\t},\n\t\t{\n\t\t\t"begin": "(^[ \\\\t]+)?(?=<(?i:style))",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.whitespace.embedded.leading.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(?!\\\\G)([ \\\\t]*$\\\\n?)?",\n\t\t\t"endCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.whitespace.embedded.trailing.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "(<)((?i:style))\\\\b",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "meta.tag.metadata.style.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "entity.name.tag.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(/>)|((<)/)((?i:style))(>)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "meta.tag.metadata.style.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "source.css"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"4": {\n\t\t\t\t\t\t\t"name": "entity.name.tag.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"5": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.embedded.block.html",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "\\\\G",\n\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t"end": "(?=/>)|(>)",\n\t\t\t\t\t\t\t"name": "meta.tag.metadata.style.html",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "(?!\\\\G)",\n\t\t\t\t\t\t\t"end": "(?=</(?i:style))",\n\t\t\t\t\t\t\t"name": "source.css",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"include": "source.css"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "(^[ \\\\t]+)?(?=<(?i:script))",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.whitespace.embedded.leading.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(?!\\\\G)([ \\\\t]*$\\\\n?)?",\n\t\t\t"endCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.whitespace.embedded.trailing.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "(<)((?i:script))\\\\b",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "entity.name.tag.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(/>)|(/)((?i:script))(>)",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "entity.name.tag.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"4": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "meta.embedded.block.html",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"begin": "\\\\G",\n\t\t\t\t\t\t\t"end": "(?=/>|/)",\n\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"begin": "(>)",\n\t\t\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"end": "((<))(?=/(?i:script))",\n\t\t\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "source.js"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"begin": "\\\\G",\n\t\t\t\t\t\t\t\t\t\t\t"end": "(?=</(?i:script))",\n\t\t\t\t\t\t\t\t\t\t\t"name": "source.js",\n\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"begin": "(^[ \\\\t]+)?(?=//)",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.whitespace.comment.leading.js"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t"end": "(?!\\\\G)",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"begin": "//",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.comment.js"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"end": "(?=</script)|\\\\n",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "comment.line.double-slash.js"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"begin": "/\\\\*",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"captures": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.comment.js"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t"end": "\\\\*/|(?=</script)",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "comment.block.js"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"include": "source.js"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"begin": "\\\\G",\n\t\t\t\t\t\t\t\t\t"end": "(?i:(?=/?>|type(?=[\\\\s=])(?!\\\\s*=\\\\s*(\'|\\"|)(text/(javascript|ecmascript|babel)|application/((x-)?javascript|ecmascript|babel)|module)[\\\\s\\"\'>])))",\n\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html",\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"begin": "(?=(?i:type\\\\s*=\\\\s*(\'|\\"|)(text/(x-handlebars|(x-(handlebars-)?|ng-)?template|html)[\\\\s\\"\'>])))",\n\t\t\t\t\t\t\t\t\t"end": "((<))(?=/(?i:script))",\n\t\t\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "text.html.basic"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"begin": "\\\\G",\n\t\t\t\t\t\t\t\t\t\t\t"end": "(>)|(?=/>)",\n\t\t\t\t\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html",\n\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"begin": "(?!\\\\G)",\n\t\t\t\t\t\t\t\t\t\t\t"end": "(?=</(?i:script))",\n\t\t\t\t\t\t\t\t\t\t\t"name": "text.html.basic",\n\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"include": "text.html.basic"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t"begin": "(?=(?i:type))",\n\t\t\t\t\t\t\t\t\t"end": "(<)(?=/(?i:script))",\n\t\t\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"begin": "\\\\G",\n\t\t\t\t\t\t\t\t\t\t\t"end": "(>)|(?=/>)",\n\t\t\t\t\t\t\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"name": "meta.tag.metadata.script.html",\n\t\t\t\t\t\t\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"begin": "(?!\\\\G)",\n\t\t\t\t\t\t\t\t\t\t\t"end": "(?=</(?i:script))",\n\t\t\t\t\t\t\t\t\t\t\t"name": "source.unknown"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "(</?)((?i:body|head|html)\\\\b)",\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "entity.name.tag.structure.any.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(>)",\n\t\t\t"name": "meta.tag.structure.any.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "(</?)((?i:address|blockquote|dd|div|section|article|aside|header|footer|nav|menu|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|pre)\\\\b)",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "entity.name.tag.block.any.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(>)",\n\t\t\t"endCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.tag.block.any.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\\\b(?!-))",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "entity.name.tag.inline.any.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "((?: ?/)?>)",\n\t\t\t"endCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.tag.inline.any.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"begin": "(</?)([a-zA-Z][a-zA-Z0-9:-]*)",\n\t\t\t"beginCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.begin.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "entity.name.tag.other.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(/?>)",\n\t\t\t"endCaptures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "punctuation.definition.tag.end.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "meta.tag.other.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-stuff"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"include": "#entities"\n\t\t},\n\t\t{\n\t\t\t"match": "<>",\n\t\t\t"name": "invalid.illegal.incomplete.html"\n\t\t}\n\t],\n\t"repository": {\n\t\t"embedded-code": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#smarty"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#python"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"entities": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"3": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.entity.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(&)([a-zA-Z0-9]+|#[0-9]+|#[xX][0-9a-fA-F]+)(;)",\n\t\t\t\t\t"name": "constant.character.entity.html"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": "&",\n\t\t\t\t\t"name": "invalid.illegal.bad-ampersand.html"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"python": {\n\t\t\t"begin": "(?:^\\\\s*)<\\\\?python(?!.*\\\\?>)",\n\t\t\t"end": "\\\\?>(?:\\\\s*$\\\\n)?",\n\t\t\t"name": "source.python.embedded.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "source.python"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"smarty": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "(\\\\{(literal)\\\\})",\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"1": {\n\t\t\t\t\t\t\t"name": "source.smarty.embedded.html"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t"2": {\n\t\t\t\t\t\t\t"name": "support.function.built-in.smarty"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"end": "(\\\\{/(literal)\\\\})"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "{{|{",\n\t\t\t\t\t"disabled": 1,\n\t\t\t\t\t"end": "}}|}",\n\t\t\t\t\t"name": "source.smarty.embedded.html",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "source.smarty"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"string-double-quoted": {\n\t\t\t"begin": "\\"",\n\t\t\t"beginCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.string.begin.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "\\"",\n\t\t\t"endCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.string.end.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "string.quoted.double.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#entities"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"string-single-quoted": {\n\t\t\t"begin": "\'",\n\t\t\t"beginCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.string.begin.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "\'",\n\t\t\t"endCaptures": {\n\t\t\t\t"0": {\n\t\t\t\t\t"name": "punctuation.definition.string.end.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"name": "string.quoted.single.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#entities"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"tag-generic-attribute": {\n\t\t\t"match": "(?<=[^=])\\\\b([a-zA-Z0-9:-]+)",\n\t\t\t"name": "entity.other.attribute-name.html"\n\t\t},\n\t\t"tag-id-attribute": {\n\t\t\t"begin": "\\\\b(id)\\\\b\\\\s*(=)",\n\t\t\t"captures": {\n\t\t\t\t"1": {\n\t\t\t\t\t"name": "entity.other.attribute-name.id.html"\n\t\t\t\t},\n\t\t\t\t"2": {\n\t\t\t\t\t"name": "punctuation.separator.key-value.html"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"end": "(?!\\\\G)(?<=\'|\\"|[^\\\\s<>/])",\n\t\t\t"name": "meta.attribute-with-value.id.html",\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"begin": "\\"",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"contentName": "meta.toc-list.id.html",\n\t\t\t\t\t"end": "\\"",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "string.quoted.double.html",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#entities"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"begin": "\'",\n\t\t\t\t\t"beginCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.begin.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"contentName": "meta.toc-list.id.html",\n\t\t\t\t\t"end": "\'",\n\t\t\t\t\t"endCaptures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "punctuation.definition.string.end.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"name": "string.quoted.single.html",\n\t\t\t\t\t"patterns": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t"include": "#entities"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"captures": {\n\t\t\t\t\t\t"0": {\n\t\t\t\t\t\t\t"name": "meta.toc-list.id.html"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t"match": "(?<==)(?:[^\\\\s<>/\'\\"]|/(?!>))+",\n\t\t\t\t\t"name": "string.unquoted.html"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"tag-stuff": {\n\t\t\t"patterns": [\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-id-attribute"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#tag-generic-attribute"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#string-double-quoted"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#string-single-quoted"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#embedded-code"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"include": "#unquoted-attribute"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t"unquoted-attribute": {\n\t\t\t"match": "(?<==)(?:[^\\\\s<>/\'\\"]|/(?!>))+",\n\t\t\t"name": "string.unquoted.html"\n\t\t}\n\t}\n}'},"../../node_modules/worker-loader/dist/cjs.js?publicPath=/&name=monaco-typings-ata.[hash:8].worker.js!./src/embed/components/Content/Monaco/workers/fetch-dependency-typings.js":function(t,n){t.exports=function(){return new Worker("/monaco-typings-ata.79731152.worker.js")}},"./src/app/components/CodeEditor/FuzzySearch/index.js":function(t,n,e){"use strict";var i=e("../../node_modules/@babel/runtime/helpers/extends.js"),r=e.n(i),a=e("../../node_modules/@babel/runtime/helpers/classCallCheck.js"),s=e.n(a),c=e("../../node_modules/@babel/runtime/helpers/createClass.js"),o=e.n(c),d=e("../../node_modules/@babel/runtime/helpers/assertThisInitialized.js"),y=e.n(d),k=e("../../node_modules/@babel/runtime/helpers/inherits.js"),l=e.n(k),g=e("../../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),u=e.n(g),m=e("../../node_modules/@babel/runtime/helpers/getPrototypeOf.js"),p=e.n(m),b=e("../../node_modules/@babel/runtime/helpers/defineProperty.js"),h=e.n(b),f=e("../../node_modules/lodash-es/flatten.js"),x=e("../../node_modules/lodash-es/groupBy.js"),v=e("../../node_modules/lodash-es/sortBy.js"),w=e("../../node_modules/react/index.js"),_=e("../../node_modules/downshift/dist/downshift.esm.js"),$=e("../../node_modules/match-sorter/dist/cjs/index.js"),C=e.n($),E=e("../common/lib/sandbox/modules.js"),S=e("../common/lib/components/Input/index.js"),j=e.n(S),M=e("./src/app/pages/Sandbox/Editor/Workspace/Files/DirectoryEntry/Entry/EntryIcons/index.tsx"),T=e("./src/app/utils/get-type.ts"),A=e("../common/lib/utils/keycodes.js"),O=e("../../node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js"),L=e.n(O),N=e("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),D=e("../../node_modules/react-icons/lib/go/primitive-dot.js"),z=e.n(D);function I(){var t=L()(["\n  margin: 0 0.25rem;\n  font-weight: 400;\n  color: rgba(255, 255, 255, 0.5);\n"]);return I=function(){return t},t}function F(){var t=L()(["\n  margin: 0 0.5rem;\n"]);return F=function(){return t},t}function R(){var t=L()(["\n  position: absolute;\n  right: 0.75rem;\n  font-weight: 500;\n  color: ",";\n"]);return R=function(){return t},t}function P(){var t=L()(["\n  position: absolute;\n  left: 0.75rem;\n  top: 0;\n  color: ",";\n  vertical-align: middle;\n\n  margin-top: 6px;\n"]);return P=function(){return t},t}function G(){var t=L()(["\n      background-color: ",";\n    "]);return G=function(){return t},t}function B(){var t=L()(["\n      padding-left: 2rem;\n    "]);return B=function(){return t},t}function q(){var t=L()(["\n  position: relative;\n  display: flex;\n  align-items: center;\n  font-size: 0.875rem;\n  padding: 0.25rem 0.75rem;\n  cursor: pointer;\n\n  ",";\n  color: rgba(255, 255, 255, 0.8);\n\n  ",";\n"]);return q=function(){return t},t}function V(){var t=L()(["\n  max-height: 500px;\n  overflow-y: auto;\n  overflow-x: hidden;\n"]);return V=function(){return t},t}function W(){var t=L()(["\n  padding: 0.5rem;\n  input {\n    width: 100%;\n  }\n"]);return W=function(){return t},t}function H(){var t=L()(["\n  position: absolute;\n\n  top: 0;\n  left: 0;\n  right: 0;\n\n  z-index: 60;\n\n  margin: auto;\n  padding-bottom: 0.25rem;\n\n  background-color: ",";\n\n  max-width: 650px;\n  width: 100%;\n\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.6);\n"]);return H=function(){return t},t}var Z=N.default.div.withConfig({displayName:"elements__Container",componentId:"sc-1gvuwy5-0"})(H(),(function(t){return t.theme.background})),U=N.default.div.withConfig({displayName:"elements__InputContainer",componentId:"sc-1gvuwy5-1"})(W()),K=N.default.div.withConfig({displayName:"elements__Items",componentId:"sc-1gvuwy5-2"})(V()),X=N.default.div.withConfig({displayName:"elements__Entry",componentId:"sc-1gvuwy5-3"})(q(),(function(t){return t.isNotSynced&&Object(N.css)(B())}),(function(t){return t.isActive&&Object(N.css)(G(),(function(t){return t.theme.secondary.clearer(.7)}))})),Y=Object(N.default)(z.a).withConfig({displayName:"elements__NotSyncedIconWithMargin",componentId:"sc-1gvuwy5-4"})(P(),(function(t){return t.theme.templateColor||t.theme.secondary})),Q=N.default.div.withConfig({displayName:"elements__CurrentModuleText",componentId:"sc-1gvuwy5-5"})(R(),(function(t){return t.theme.secondary})),J=N.default.span.withConfig({displayName:"elements__Name",componentId:"sc-1gvuwy5-6"})(F()),tt=N.default.span.withConfig({displayName:"elements__Path",componentId:"sc-1gvuwy5-7"})(I());function nt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function et(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?nt(Object(e),!0).forEach((function(n){h()(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):nt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function it(t){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,i=p()(t);if(n){var r=p()(this).constructor;e=Reflect.construct(i,arguments,r)}else e=i.apply(this,arguments);return u()(this,e)}}e.d(n,"a",(function(){return rt}));var rt=function(t){l()(e,t);var n=it(e);function e(){var t;s()(this,e);for(var i=arguments.length,r=new Array(i),a=0;a<i;a++)r[a]=arguments[a];return t=n.call.apply(n,[this].concat(r)),h()(y()(t),"paths",{}),h()(y()(t),"itemToString",(function(t){return t?t.path:""})),h()(y()(t),"getItems",(function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=Object.keys(t.paths).map((function(n){return t.paths[n]}));return C()(e,n,{keys:["path"]})})),h()(y()(t),"onChange",(function(n){t.props.setCurrentModule(n.m.id)})),h()(y()(t),"handleKeyUp",(function(n){n.keyCode===A.ESC&&t.props.closeFuzzySearch()})),t}return o()(e,[{key:"UNSAFE_componentWillMount",value:function(){var t=this.props,n=t.modules,e=t.directories,i=n.map((function(t){var i=Object(E.getModulePath)(n,e,t.id);return{m:t,path:i,depth:i.split("/").length}})),r=Object(x.a)(i,(function(t){return t.depth})),a=Object.values(r).map((function(t){return Object(v.a)(t,(function(t){return t.path}))})),s=Object(f.a)(a);this.paths=s.reduce((function(t,n){var e=n.m,i=n.path;return et(et({},t),{},h()({},e.id,{path:i.replace("/",""),m:e}))}),{})}},{key:"render",value:function(){var t=this,n=this.props.currentModuleId;return w.createElement(Z,null,w.createElement(_.a,{defaultHighlightedIndex:0,defaultIsOpen:!0,onChange:this.onChange,itemToString:this.itemToString},(function(e){var i=e.getInputProps,a=e.getItemProps,s=e.selectedItem,c=e.inputValue,o=e.highlightedIndex;return w.createElement("div",{style:{width:"100%"}},w.createElement(U,null,w.createElement(j.a,i({ref:function(t){return t&&t.focus()},onKeyUp:t.handleKeyUp,onBlur:function(){return setTimeout(t.props.closeFuzzySearch,100)}}))),w.createElement(K,null,t.getItems(c).map((function(e,i){return w.createElement(X,r()({},a({item:e,index:i,isActive:o===i,isSelected:s===e}),{key:e.m.id,isNotSynced:e.m.isNotSynced}),e.m.isNotSynced&&w.createElement(Y,null),w.createElement(M.a,{isNotSynced:e.m.isNotSynced,type:Object(T.a)(e.m.title),error:e.m.errors&&e.m.errors.length>0}),w.createElement(J,null,e.m.title),e.m.title!==t.itemToString(e)&&w.createElement(tt,null,t.itemToString(e)),e.m.id===n&&w.createElement(Q,null,"currently opened"))}))))})))}}]),e}(w.PureComponent)},"./src/embed/components/Content/Monaco/index.js":function(t,n,e){"use strict";e.r(n);var i=e("../../node_modules/@babel/runtime/helpers/toConsumableArray.js"),r=e.n(i),a=e("../../node_modules/@babel/runtime/regenerator/index.js"),s=e.n(a),c=e("../../node_modules/@babel/runtime/helpers/asyncToGenerator.js"),o=e.n(c),d=e("../../node_modules/@babel/runtime/helpers/classCallCheck.js"),y=e.n(d),k=e("../../node_modules/@babel/runtime/helpers/createClass.js"),l=e.n(k),g=e("../../node_modules/@babel/runtime/helpers/assertThisInitialized.js"),u=e.n(g),m=e("../../node_modules/@babel/runtime/helpers/inherits.js"),p=e.n(m),b=e("../../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),h=e.n(b),f=e("../../node_modules/@babel/runtime/helpers/getPrototypeOf.js"),x=e.n(f),v=e("../../node_modules/@babel/runtime/helpers/defineProperty.js"),w=e.n(v),_=e("../../node_modules/lodash-es/debounce.js"),$=e("../../node_modules/path-browserify/index.js"),C=e("../common/lib/sandbox/modules.js"),E=e("../common/lib/templates/index.js"),S=e.n(E),j=e("../common/lib/utils/delay.js"),M=e.n(j),T=e("../common/lib/utils/diff/index.js"),A=e("./src/app/components/CodeEditor/FuzzySearch/index.js"),O=e("./src/app/utils/monaco-index-converter.js"),L=e("../codesandbox-api/dist/codesandbox.es5.js"),N=e("../../node_modules/ot/lib/index.js"),D=e("../../node_modules/react/index.js"),z=e("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),I=e("../../node_modules/worker-loader/dist/cjs.js?publicPath=/&name=monaco-linter.[hash:8].worker.js!./src/app/overmind/effects/vscode/LinterWorker/index.js"),F=e.n(I),R=e("../../node_modules/worker-loader/dist/cjs.js?publicPath=/&name=monaco-typings-ata.[hash:8].worker.js!./src/embed/components/Content/Monaco/workers/fetch-dependency-typings.js"),P=e.n(R),G=e("./src/embed/components/Content/Monaco/define-theme.js"),B=e("./src/embed/components/Content/Monaco/elements.js");var q=e("../../node_modules/onigasm/lib/index.js"),V=e("../../node_modules/monaco-textmate/dist/main.js");function W(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function H(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?W(Object(e),!0).forEach((function(n){w()(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):W(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var Z=e("../../node_modules/monaco-textmate/dist/main.js"),U=function(){function t(n){y()(this,t),this._ruleStack=n}return l()(t,[{key:"clone",value:function(){return new t(this._ruleStack)}},{key:"equals",value:function(n){return!!(n&&n instanceof t&&n===this&&n._ruleStack===this._ruleStack)}},{key:"ruleStack",get:function(){return this._ruleStack}}]),t}();function K(t,n,e){return Promise.all(Array.from(e.keys()).map(function(){var i=o()(s.a.mark((function i(r){var a;return s.a.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.prev=0,i.next=3,n.loadGrammar(e.get(r));case 3:a=i.sent,t.languages.setTokensProvider(r,{getInitialState:function(){return new U(Z.INITIAL)},tokenize:function(t,n){var e=a.tokenizeLine(t,n.ruleStack);return{endState:new U(e.ruleStack),tokens:e.tokens.map((function(t){return H(H({},t),{},{scopes:t.scopes[t.scopes.length-1]})}))}}}),i.next=10;break;case 7:i.prev=7,i.t0=i.catch(0);case 10:case"end":return i.stop()}}),i,null,[[0,7]])})));return function(t){return i.apply(this,arguments)}}()))}var X=e("../../node_modules/raw-loader/index.js!./src/embed/components/Content/Monaco/grammars/tmGrammars/css.json.tmLanguage"),Y=e.n(X),Q=e("../../node_modules/raw-loader/index.js!./src/embed/components/Content/Monaco/grammars/tmGrammars/html.json.tmLanguage"),J=e.n(Q),tt=e("../../node_modules/raw-loader/index.js!./src/embed/components/Content/Monaco/grammars/tmGrammars/TypeScriptReact.tmLanguage"),nt=e.n(tt),et=!1;function it(t){return rt.apply(this,arguments)}function rt(){return(rt=o()(s.a.mark((function t(n){var e,i;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!et){t.next=2;break}return t.abrupt("return");case 2:return et=!0,t.next=5,Object(q.loadWASM)("/public/onigasm/2.2.1/onigasm.wasm");case 5:return e=new V.Registry({getGrammarDefinition:function(){var t=o()(s.a.mark((function t(n){return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("source.css"!==n){t.next=2;break}return t.abrupt("return",{format:"json",content:Y.a});case 2:if("text.html.basic"!==n){t.next=4;break}return t.abrupt("return",{format:"json",content:J.a});case 4:return t.abrupt("return",{format:"plist",content:nt.a});case 5:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()}),(i=new Map).set("css","source.css"),i.set("html","text.html.basic"),i.set("vue","text.html.basic"),i.set("typescript","source.tsx"),i.set("javascript","source.js"),t.next=14,K(n,e,i);case 14:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var at=e("../../node_modules/glamor/lib/index.js");function st(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function ct(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?st(Object(e),!0).forEach((function(n){w()(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):st(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var ot=at.css.keyframes("fadeIn",{"0%":{opacity:0},"100%":{opacity:1}}),dt=at.css.keyframes("fadeOut",{"0%":{opacity:1},"100%":{opacity:0}}),yt={},kt={};var lt=e("./src/embed/components/Content/Monaco/mode.ts"),gt=e("./src/embed/components/Content/Monaco/MonacoReactComponent.js"),ut=e("./src/embed/components/Content/Monaco/settings.js");function mt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function pt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?mt(Object(e),!0).forEach((function(n){w()(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):mt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function bt(t){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,i=x()(t);if(n){var r=x()(this).constructor;e=Reflect.construct(i,arguments,r)}else e=i.apply(this,arguments);return h()(this,e)}}function ht(t,n){var e=Object(O.b)(t,n.startLineNumber,n.startColumn),i=Object(O.b)(t,n.endLineNumber,n.endColumn);return{selection:e===i?[]:[e,i],cursorPosition:Object(O.b)(t,n.positionLineNumber,n.positionColumn)}}var ft={},xt=function(t){p()(e,t);var n=bt(e);function e(t){var i;return y()(this,e),i=n.call(this,t),w()(u()(i),"sandbox",void 0),w()(u()(i),"currentModule",void 0),w()(u()(i),"settings",void 0),w()(u()(i),"dependencies",void 0),w()(u()(i),"tsconfig",void 0),w()(u()(i),"disposeInitializer",void 0),w()(u()(i),"syntaxWorker",void 0),w()(u()(i),"lintWorker",void 0),w()(u()(i),"typingsFetcherWorker",void 0),w()(u()(i),"editor",void 0),w()(u()(i),"monaco",void 0),w()(u()(i),"receivingCode",!1),w()(u()(i),"transpilationListener",void 0),w()(u()(i),"sizeProbeInterval",void 0),w()(u()(i),"configureEditor",function(){var t=o()(s.a.mark((function t(n,e){var r,a,c,o,d,y;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i.editor=n,i.monaco=e,window.CSEditor={editor:i.editor,monaco:i.monaco},requestAnimationFrame((function(){i.setupWorkers(),n.onDidChangeModelContent((function(t){var n=i.props,e=n.isLive,r=n.sendTransforms;e&&r&&!i.receivingCode&&i.sendChangeOperations(t),i.handleChange()}))})),e.languages.typescript.typescriptDefaults.setMaximumWorkerIdleTime(-1),e.languages.typescript.javascriptDefaults.setMaximumWorkerIdleTime(-1),e.languages.typescript.typescriptDefaults.setEagerModelSync(!0),e.languages.typescript.javascriptDefaults.setEagerModelSync(!0),i.setCompilerOptions(),r=u()(i),a=r.sandbox,c=u()(i),o=c.currentModule,it(e),i.initializeModules(a.modules),t.next=15,i.openNewModel(o);case 15:window.addEventListener("resize",i.resizeEditor),i.sizeProbeInterval=setInterval((function(){i.props.absoluteWidth&&i.props.absoluteHeight||i.resizeEditorInstantly()}),3e3),d=u()(i),null!=(y=d.dependencies)&&Object.keys(y)&&setTimeout((function(){i.fetchDependencyTypings(y),i.getConfigSchemas()}),i.hasNativeTypescript()?500:5e3),n.addAction({id:"fuzzy-search",label:"Open Module",keybindings:[e.KeyMod.CtrlCmd|e.KeyCode.KEY_P],precondition:null,keybindingContext:null,contextMenuGroupId:"navigation",contextMenuOrder:1.5,run:function(){i.setState({fuzzySearchEnabled:!0},(function(){return i.forceUpdate()}))}}),n.onDidChangeCursorSelection((function(t){var e=i.props,r=e.onSelectionChanged;if(e.isLive&&n.getModel()){var a=n.getModel().getLinesContent()||[],s={primary:ht(a,t.selection),secondary:t.secondarySelections.map((function(t){return ht(a,t)}))};3!==t.reason&&"moveWordCommand"!==t.source&&"api"!==t.source||!r?i.onSelectionChangedDebounced({selection:s,moduleShortid:i.currentModule.shortid}):(i.onSelectionChangedDebounced.cancel(),r({selection:s,moduleShortid:i.currentModule.shortid}))}})),i.props.onInitialized&&(i.disposeInitializer=i.props.onInitialized(u()(i))),n.addCommand(i.monaco.KeyMod.CtrlCmd|i.monaco.KeyCode.KEY_S,(function(){var t=i.props.onSave;t&&t(i.getCode())})),i.registerAutoCompletions();case 24:case"end":return t.stop()}}),t)})));return function(n,e){return t.apply(this,arguments)}}()),w()(u()(i),"setCompilerOptions",(function(){var t=i.hasNativeTypescript(),n=i.tsconfig?i.tsconfig.compilerOptions:{},e={jsxFactory:n.jsxFactory||"React.createElement",reactNamespace:n.reactNamespace||"React",jsx:i.monaco.languages.typescript.JsxEmit.React,target:i.monaco.languages.typescript.ScriptTarget.ES2016,allowNonTsExtensions:!t,moduleResolution:i.monaco.languages.typescript.ModuleResolutionKind.NodeJs,module:t?i.monaco.languages.typescript.ModuleKind.ES2015:i.monaco.languages.typescript.ModuleKind.System,experimentalDecorators:!0,noEmit:!0,allowJs:!0,typeRoots:["node_modules/@types"],forceConsistentCasingInFileNames:t&&n.forceConsistentCasingInFileNames,noImplicitReturns:t&&n.noImplicitReturns,noImplicitThis:t&&n.noImplicitThis,noImplicitAny:t&&n.noImplicitAny,strictNullChecks:t&&n.strictNullChecks,suppressImplicitAnyIndexErrors:t&&n.suppressImplicitAnyIndexErrors,noUnusedLocals:t&&n.noUnusedLocals,newLine:i.monaco.languages.typescript.NewLineKind.LineFeed};i.monaco.languages.typescript.typescriptDefaults.setCompilerOptions(e),i.monaco.languages.typescript.javascriptDefaults.setCompilerOptions(e),i.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!1,noSyntaxValidation:!t})})),w()(u()(i),"setReceivingCode",(function(t){i.receivingCode=t})),w()(u()(i),"setTSConfig",(function(t){i.tsconfig=t,i.setCompilerOptions()})),w()(u()(i),"changeModule",(function(t,n,e){var r=i.currentModule;i.swapDocuments(r,t).then((function(){i.currentModule=t,n&&i.setErrors(n),e&&i.setCorrections(e),i.props.onCodeReceived&&(i.props.onCodeReceived(),i.liveOperationCode="")}))})),w()(u()(i),"onSelectionChangedDebounced",(function(t){i.props.onSelectionChanged&&i.props.onSelectionChanged(t)})),w()(u()(i),"liveOperationCode",""),w()(u()(i),"sendChangeOperations",(function(t){var n=i.props,e=n.sendTransforms,a=n.isLive,s=n.onCodeReceived;if(e&&t.changes){i.liveOperationCode=i.liveOperationCode||i.currentModule.code||"";try{var c=function(t,n){for(var e,i=n,a=0,s=r()(t.changes);a<s.length;a++){var c=s[a],o=new N.TextOperation,d=Object(O.b)(i.split(/\n/),c.range.startLineNumber,c.range.startColumn)-o.targetLength;0!==d&&o.retain(d),c.rangeLength>0&&o.delete(c.rangeLength),c.text&&o.insert(c.text);var y=i.length-o.baseLength;y>0&&o.retain(y),i=(e=e?e.compose(o):o).apply(n)}return{operation:e,newCode:i}}(t,i.liveOperationCode),o=c.operation,d=c.newCode;i.liveOperationCode=d,e(o)}catch(t){console.error(t),i.props.onModuleStateMismatch()}requestAnimationFrame((function(){i.liveOperationCode=""}))}else!a&&s&&s()})),w()(u()(i),"userClassesGenerated",{}),w()(u()(i),"userSelectionDecorations",{}),w()(u()(i),"updateUserSelections",(function(t){!function(t,n,e,i){if(n.getModel()){var r=n.getModel().getLinesContent()||[];i.forEach((function(i){var a=i.userId,s=e.shortid+a;if(null!==i.selection){var c=[],o=i.selection,d=i.color,y=i.name;if(o){var k=function(n,e){var i=Object(O.a)(r,n);c.push({range:new t.Range(i.lineNumber,i.column,i.lineNumber,i.column),options:{className:yt[e]}})},l=function(n,e,i){var a=Object(O.a)(r,n),s=Object(O.a)(r,e);c.push({range:new t.Range(a.lineNumber,a.column,s.lineNumber,s.column),options:{className:yt[i]}})},g=d.join("-")+a,u=g+"-cursor",m=g+"-secondary-cursor",p=g+"-selection",b=g+"-secondary-selection";if(!yt[u]){var h={content:y,position:"absolute",top:-17,backgroundColor:"rgb(".concat(d[0],", ").concat(d[1],", ").concat(d[2],")"),zIndex:20,color:d[0]+d[1]+d[2]>500?"rgba(0, 0, 0, 0.8)":"white",padding:"2px 4px",borderRadius:2,borderBottomLeftRadius:0,fontSize:".75rem",fontWeight:600,userSelect:"none",pointerEvents:"none",width:"max-content"};yt[u]="".concat(Object(at.css)({backgroundColor:"rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", 0.8)"),width:"2px !important",cursor:"text",zIndex:30,":before":ct({animation:"".concat(dt," 0.3s"),animationDelay:"1s",animationFillMode:"forwards",opacity:1},h),":hover":{":before":ct({animation:"".concat(ot," 0.3s"),animationFillMode:"forwards",opacity:0},h)}}))}yt[m]||(yt[m]="".concat(Object(at.css)({backgroundColor:"rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", 0.6)"),width:"2px !important"}))),yt[p]||(yt[p]="".concat(Object(at.css)({backgroundColor:"rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", 0.3)"),borderRadius:"3px",minWidth:7.6}))),yt[b]||(yt[b]="".concat(Object(at.css)({backgroundColor:"rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", 0.2)"),borderRadius:"3px",minWidth:7.6}))),k(o.primary.cursorPosition,u),o.primary.selection.length&&l(o.primary.selection[0],o.primary.selection[1],p),o.secondary.length&&o.secondary.forEach((function(t){k(t.cursorPosition,m),t.selection.length&&l(t.selection[0],t.selection[1],b)}))}requestAnimationFrame((function(){kt[s]=n.deltaDecorations(kt[s]||[],c,a)}))}else kt[s]=n.deltaDecorations(kt[s]||[],[],i.userId)}))}}(i.monaco,i.editor,i.currentModule,t)})),w()(u()(i),"changeSandbox",(function(t,n,e){return new Promise((function(r){var a=i.sandbox;i.sandbox=t,i.currentModule=n,i.dependencies=e,i.disposeModules(a.modules),setTimeout((function(){i.getConfigSchemas(),i.initializeModules(t.modules).then((function(){return i.openNewModel(n)})).then(r)}))}))})),w()(u()(i),"changeCode",(function(t,n){t===i.getCode()||n&&i.currentModule.id!==n||(i.updateCode(t),i.lint(t,i.currentModule.title,i.editor.getModel().getVersionId()))})),w()(u()(i),"applyOperationToModel",(function(t,n){for(var e=i.editor.getModel(),r=[],a=0,s=0;s<t.ops.length;s++){var c=t.ops[s];if(N.TextOperation.isRetain(c))a+=c;else if(N.TextOperation.isInsert(c)){var o=Object(O.a)(e.getLinesContent()||[],a),d=o.lineNumber,y=o.column,k=new i.monaco.Range(d,y,d,y);r.push({range:k,text:c,forceMoveMarkers:!0})}else if(N.TextOperation.isDelete(c)){var l=e.getLinesContent()||[],g=Object(O.a)(l,a),u=Object(O.a)(l,a-c);r.push({range:new i.monaco.Range(g.lineNumber,g.column,u.lineNumber,u.column),text:""}),a-=c}}n?e.pushEditOperations([],r):e.applyEdits(r)})),w()(u()(i),"applyOperations",(function(t){var n=t.toJSON();Object.keys(n).forEach((function(t){var e=N.TextOperation.fromJSON(n[t]);if(t===i.currentModule.shortid)i.liveOperationCode="",i.applyOperationToModel(e);else{var r=i.sandbox.modules.find((function(n){return n.shortid===t}));if(!r)return;try{var a=e.apply(r.code||"");i.props.onChange&&i.props.onChange(a,r.shortid)}catch(t){i.props.onModuleStateMismatch()}}}))})),w()(u()(i),"changeDependencies",(function(t){i.dependencies=t,t&&i.fetchDependencyTypings(t)})),w()(u()(i),"changeSettings",(function(t){i.settings=t,t.lintEnabled&&!i.lintWorker&&i.setupLintWorker(),i.editor.updateOptions(i.getEditorOptions()),i.forceUpdate()})),w()(u()(i),"updateModules",(function(){var t=u()(i).sandbox;t.modules.forEach((function(n){if(ft[n.id]&&ft[n.id].model){var e=Object(C.getModulePath)(t.modules,t.directories,n.id);if(""===e)return void i.disposeModel(n.id);if(e!==ft[n.id].model.uri.path){var r=i.editor.getModel()===ft[n.id].model;r&&i.editor.setModel(null),i.disposeModel(n.id),i.createModel(n,t.modules,t.directories).then((function(t){r&&i.editor.setModel(t)}))}}})),Object.keys(ft).forEach((function(n){t.modules.find((function(t){return t.id===n}))||i.disposeModel(n)}))})),w()(u()(i),"setErrors",(function(t){if(t.length>0){var n=i.editor.getModel().uri.path,e=t.filter((function(t){return t.path===n})).map((function(t){return t?{severity:i.monaco.MarkerSeverity.Error,startColumn:1,startLineNumber:t.line,endColumn:t.columnEnd||t.column,endLineNumber:t.lineEnd||t.line+1,message:t.message}:null})).filter((function(t){return t}));i.monaco.editor.setModelMarkers(i.editor.getModel(),"error",e)}else i.monaco.editor.setModelMarkers(i.editor.getModel(),"error",[])})),w()(u()(i),"setCorrections",(function(t){if(t.length>0){var n=i.editor.getModel().uri.path,e=t.filter((function(t){return t.path===n})).map((function(t){return t?{severity:"warning"===t.severity?i.monaco.MarkerSeverity.Warning:i.monaco.MarkerSeverity.Notice,startColumn:t.column,startLineNumber:t.line,endColumn:t.columnEnd||1,endLineNumber:t.lineEnd||t.line+1,message:t.message,source:t.source}:null})).filter((function(t){return t}));i.monaco.editor.setModelMarkers(i.editor.getModel(),"correction",e)}else i.monaco.editor.setModelMarkers(i.editor.getModel(),"correction",[])})),w()(u()(i),"registerAutoCompletions",(function(){i.monaco.languages.registerCompletionItemProvider("typescript",{triggerCharacters:['"',"'","."],provideCompletionItems:function(t,n){var e=t.getValueInRange({startLineNumber:1,startColumn:1,endLineNumber:n.lineNumber,endColumn:n.column},1);if(/(([\s|\n]from\s)|(\brequire\b\())["|']\.*$/.test(e)){if(e.endsWith(".")){var r=e.match(/[./]+$/)[0],a=new WeakMap;i.sandbox.modules.forEach((function(t){var n=Object(C.getModulePath)(i.sandbox.modules,i.sandbox.directories,t.id);a.set(t,-1===n.indexOf("/")?"/"+n:n)}));var s=a.get(i.currentModule);if(!s)return null;var c=Object($.join)(Object($.dirname)(s),r);return i.sandbox.modules.filter((function(t){var n=a.get(t);return n&&t.id!==i.currentModule.id&&n.startsWith(c)})).map((function(t){var n=a.get(t);return n?(n.endsWith(".js")&&(n=n.replace(/\.js$/,"")),n.endsWith(".ts")&&(n=n.replace(/\.ts$/,"")),{label:r+n.replace(c,"/"===c?"/":""),insertText:n.slice("/"===c?0:c.length),kind:i.monaco.languages.CompletionItemKind.File}):null})).filter(Boolean)}var o=i.dependencies;return o?Object.keys(o).map((function(t){return{label:t,detail:o[t],kind:i.monaco.languages.CompletionItemKind.Module}})):[]}return[]}})})),w()(u()(i),"setupTypeWorker",(function(){i.typingsFetcherWorker=new P.a;var t=/node_modules\/(@types\/.*?)\//;i.fetchDependencyTypings(i.dependencies||{}),i.typingsFetcherWorker&&i.typingsFetcherWorker.addEventListener("message",(function(n){var e=u()(i).sandbox,r=i.dependencies||e.npmDependencies;Object.keys(n.data).forEach((function(e){var a=n.data[e];if(e.startsWith("node_modules/@types")&&i.hasNativeTypescript()){var s=e.match(t);if(s&&s[1]){var c=s[1];!Object.keys(r).includes(c)&&i.props.onNpmDependencyAdded&&i.props.onNpmDependencyAdded(c)}}i.addLib(a,"/"+e)}))}))})),w()(u()(i),"setupLintWorker",(function(){i.lintWorker||(i.lintWorker=new F.a,i.lintWorker.addEventListener("message",(function(t){var n=t.data,e=n.markers,r=n.version;requestAnimationFrame((function(){if(i.editor.getModel()){var t=i.editor.getModel().uri.path;Object(L.dispatch)(L.actions.correction.clear(t,"eslint")),r===i.editor.getModel().getVersionId()&&e.forEach((function(n){Object(L.dispatch)(L.actions.correction.show(n.message,{line:n.startLineNumber,column:n.startColumn,lineEnd:n.endLineNumber,columnEnd:n.endColumn,source:"eslint",severity:2===n.severity?"warning":"notice",path:t}))}))}}))})),i.lint=Object(_.a)(i.lint,400),requestAnimationFrame((function(){i.editor.getModel()&&i.lint(i.getCode(),i.currentModule.title,i.editor.getModel().getVersionId())})))})),w()(u()(i),"setupWorkers",(function(){var t=u()(i).settings;t.lintEnabled&&setTimeout((function(){i.setupLintWorker()}),5e3),t.autoDownloadTypes&&i.setupTypeWorker()})),w()(u()(i),"updateDecorations",function(){var t=o()(s.a.mark((function t(n){var e,r,a,c;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=n.map((function(t){return{range:new i.monaco.Range(t.startLine,t.start,t.endLine,t.end),options:{inlineClassName:t.type?"".concat(t.kind," ").concat(t.type,"-of-").concat(t.parentKind):t.kind}}})),r=u()(i),a=r.currentModule,t.next=4,i.getModelById(a.id);case 4:(c=t.sent).decorations=i.editor.deltaDecorations(c.decorations||[],e);case 6:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()),w()(u()(i),"disposeModel",(function(t){if(ft[t])try{ft[t].model&&!ft[t].model.isDisposed()&&ft[t].model.dispose(),ft[t].lib&&!ft[t].lib.isDisposed()&&ft[t].lib.dispose(),delete ft[t]}catch(t){console.error(t)}})),w()(u()(i),"swapDocuments",(function(t,n){var e=t.id;return new Promise((function(r){setTimeout(o()(s.a.mark((function a(){var c,o,d;return s.a.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return ft[e]&&(c=u()(i),o=c.sandbox,d=Object(C.getModulePath)(o.modules,o.directories,e),ft[e].viewState=i.editor.saveViewState(),ft[e].lib&&(ft[e].lib.dispose(),ft[e].lib=i.addLib(t.code||"",d))),a.next=3,i.openNewModel(n);case 3:i.editor.focus(),r();case 5:case"end":return a.stop()}}),a)}))),50)}))})),w()(u()(i),"lint",function(){var t=o()(s.a.mark((function t(n,e,r){var a;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Object(lt.a)(e,i.monaco);case 2:if(t.t0=t.sent,t.t0){t.next=5;break}t.t0="typescript";case 5:a=t.t0,i.settings.lintEnabled&&("javascript"!==a&&"vue"!==a||i.lintWorker&&i.lintWorker.postMessage({code:n,title:e,version:r,template:i.sandbox.template}));case 7:case"end":return t.stop()}}),t)})));return function(n,e,i){return t.apply(this,arguments)}}()),w()(u()(i),"handleChange",(function(){var t=i.editor.getModel().getValue(1)||"",n=u()(i).currentModule.title;(i.currentModule.code||"").replace(/\r\n/g,"\n")===t.replace(/\r\n/g,"\n")||(i.props.onChange&&i.props.onChange(t,i.currentModule.shortid),i.lint(t,n,i.editor.getModel().getVersionId()))})),w()(u()(i),"hasNativeTypescript",(function(){var t=u()(i).sandbox,n=S()(t.template);return"create-react-app"===n.name?t.modules.some((function(t){return t.title.endsWith(".tsx")})):n.isTypescript})),w()(u()(i),"fetchedSchemas",{}),w()(u()(i),"getConfigSchemas",o()(s.a.mark((function t(){var n,e,a,c,d,y;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=u()(i),e=n.sandbox,a=S()(e.template),c=a.configurationFiles,t.next=5,Promise.all(Object.keys(c).map(function(){var t=o()(s.a.mark((function t(n){var e,r;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=c[n],!i.fetchedSchemas[e.title]){t.next=3;break}return t.abrupt("return",null);case 3:if(!e.schema){t.next=14;break}return t.prev=4,t.next=7,fetch(e.schema).then((function(t){return t.json()}));case 7:return r=t.sent,t.abrupt("return",{fileName:e.title,schema:r,uri:e.schema});case 11:return t.prev=11,t.t0=t.catch(4),t.abrupt("return",null);case 14:return t.abrupt("return",null);case 15:case"end":return t.stop()}}),t,null,[[4,11]])})));return function(n){return t.apply(this,arguments)}}()));case 5:d=t.sent.filter((function(t){return t})),y=d.map((function(t){return i.fetchedSchemas[t.fileName]=!0,{uri:t.uri,fileMatch:[t.fileName],schema:t.schema}})),i.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({validate:!0,schemas:[].concat(r()(i.monaco.languages.json.jsonDefaults._diagnosticsOptions.schemas),r()(y))});case 8:case"end":return t.stop()}}),t)})))),w()(u()(i),"closeFuzzySearch",(function(){i.setState({fuzzySearchEnabled:!1},(function(){return i.forceUpdate()})),i.editor.focus()})),w()(u()(i),"fetchDependencyTypings",(function(t){i.typingsFetcherWorker&&(i.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!0,noSyntaxValidation:!i.hasNativeTypescript()}),i.typingsFetcherWorker.postMessage({dependencies:t}))})),w()(u()(i),"disposeModules",(function(t){i.editor&&i.editor.setModel(null),i.monaco&&t.forEach((function(t){i.disposeModel(t.id)})),ft={}})),w()(u()(i),"initializeModules",(function(t){return Promise.all(t.map((function(n){return i.createModel(n,t)})))})),w()(u()(i),"resizeEditor",(function(){i.resizeEditorInstantly()})),w()(u()(i),"resizeEditorInstantly",(function(){i.forceUpdate((function(){i.editor&&i.editor.layout()}))})),w()(u()(i),"addLib",(function(t,n){var e="file://".concat(n);i.monaco.languages.typescript.typescriptDefaults.getExtraLibs()[e]||(i.monaco.languages.typescript.typescriptDefaults._extraLibs[e]=t,i.commitLibChanges())})),w()(u()(i),"commitLibChanges",(function(){i.monaco.languages.typescript.typescriptDefaults._onDidChange.fire(i.monaco.languages.typescript.typescriptDefaults),i.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!1,noSyntaxValidation:!i.hasNativeTypescript()})})),w()(u()(i),"creatingModelMap",{}),w()(u()(i),"createModel",(function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.sandbox.modules,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.sandbox.directories;return i.creatingModelMap[t.id]=i.creatingModelMap[t.id]||o()(s.a.mark((function r(){var a,c,o,d;return s.a.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(!(a=Object(C.getModulePath)(n,e,t.id))){r.next=22;break}return c=i.addLib(t.code||"",a),r.next=5,Object(lt.a)(t.title,i.monaco);case 5:if(r.t0=r.sent,r.t0){r.next=8;break}r.t0="typescript";case 8:if("javascript"===(o=r.t0)||"typescript"===o||null!==i.monaco.languages.getEncodedLanguageId(o)){r.next=15;break}case 10:if(null!==i.monaco.languages.getEncodedLanguageId(o)){r.next=15;break}return r.next=13,M()(100);case 13:r.next=10;break;case 15:return(d=i.monaco.editor.createModel(t.code||"","javascript"===o?"typescript":o,new i.monaco.Uri({path:a,scheme:"file"}))).updateOptions({tabSize:i.props.settings.tabWidth}),ft[t.id]=ft[t.id]||{model:null,decorations:[],viewState:null},ft[t.id].model=d,ft[t.id].lib=c,delete i.creatingModelMap[t.id],r.abrupt("return",d);case 22:return delete i.creatingModelMap[t.id],r.abrupt("return",void 0);case 24:case"end":return r.stop()}}),r)})))(),i.creatingModelMap[t.id]})),w()(u()(i),"getModelById",function(){var t=o()(s.a.mark((function t(n){var e,r;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=i.sandbox.modules,ft[n]&&ft[n].model){t.next=6;break}if(!(r=e.find((function(t){return t.id===n})))){t.next=6;break}return t.next=6,i.createModel(r);case 6:return t.abrupt("return",ft[n]);case 7:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()),w()(u()(i),"getModelByShortid",function(){var t=o()(s.a.mark((function t(n){var e;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=i.sandbox.modules.find((function(t){return t.shortid===n}))){t.next=3;break}throw new Error("Cannot find module with shortid: "+n);case 3:return t.abrupt("return",i.getModelById(e.id));case 4:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()),w()(u()(i),"openNewModel",function(){var t=o()(s.a.mark((function t(n){var e,r,a,c;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=n.id,r=n.code,a=n.title,t.next=3,i.getModelById(e);case 3:c=t.sent,i.receivingCode=!0,r!==c.model.getValue(1)&&c.model.setValue(r),i.currentModule=n,i.editor.setModel(c.model),i.receivingCode=!1,requestAnimationFrame((function(){c.viewState&&i.editor.restoreViewState(c.viewState),i.lint(c.model.getValue(1),a,c.model.getVersionId())}));case 10:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}()),w()(u()(i),"setCurrentModule",(function(t){i.closeFuzzySearch(),i.sandbox.modules.find((function(n){return n.id===t}))&&i.props.onModuleChange&&i.props.onModuleChange(t)})),w()(u()(i),"openReference",(function(t){var n=Object.keys(ft).find((function(n){return ft[n].model===t}));return n&&i.setCurrentModule(n),Promise.resolve({getControl:function(){return i.editor}})})),w()(u()(i),"getCode",(function(){return i.editor.getValue({lineEnding:"\n"})})),w()(u()(i),"handleSaveCode",o()(s.a.mark((function t(){var n;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(n=i.props.onSave)&&n(i.getCode()||"");case 2:case"end":return t.stop()}}),t)})))),w()(u()(i),"getEditorOptions",(function(){var t=u()(i).settings,n=u()(i).currentModule;return pt(pt({},Object(ut.a)(t)),{},{ariaLabel:n.title,readOnly:!!i.props.readOnly})})),i.state={fuzzySearchEnabled:!1},i.sandbox=t.sandbox,i.currentModule=t.currentModule,i.settings=t.settings,i.dependencies=t.dependencies,i.tsconfig=t.tsconfig,i.lintWorker=null,i.typingsFetcherWorker=null,i.sizeProbeInterval=null,i.resizeEditor=Object(_.a)(i.resizeEditor,150),i.commitLibChanges=Object(_.a)(i.commitLibChanges,300),i.onSelectionChangedDebounced=Object(_.a)(i.onSelectionChangedDebounced,500),i.transpilationListener=i.setupTranspilationListener(),i}return l()(e,[{key:"shouldComponentUpdate",value:function(t){return this.props.width===t.width&&this.props.height===t.height||this.resizeEditorInstantly(),this.props.absoluteWidth&&this.props.absoluteHeight&&(this.props.absoluteWidth!==t.absoluteWidth||this.props.absoluteHeight!==t.absoluteHeight)&&this.resizeEditor(),this.props.readOnly!==t.readOnly&&this.editor&&this.editor.updateOptions({readOnly:!!t.readOnly}),this.props.theme.vscodeTheme!==t.theme.vscodeTheme&&Object(G.a)(this.monaco,t.theme.vscodeTheme),!1}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.resizeEditor),this.disposeModules(this.sandbox.modules),this.editor&&this.editor.dispose(),this.lintWorker&&this.lintWorker.terminate(),this.typingsFetcherWorker&&this.typingsFetcherWorker.terminate(),this.transpilationListener&&this.transpilationListener(),clearInterval(this.sizeProbeInterval),this.disposeInitializer&&this.disposeInitializer()}},{key:"setupTranspilationListener",value:function(){var t=this;return Object(L.listen)((function(n){var e=n.type,i=n.code,r=n.path;if("add-extra-lib"===e){var a="".concat(r,".d.ts");t.monaco.languages.typescript.typescriptDefaults._extraLibs["file:///".concat(a)]=i,t.commitLibChanges()}}))}},{key:"updateCode",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=Object(T.getTextOperation)(this.getCode(),t);this.receivingCode||(this.liveOperationCode=this.getCode()),this.applyOperationToModel(n,!0)}},{key:"render",value:function(){var t=this,n=this.props.hideNavigation,e=this.sandbox,i=this.currentModule,r=this.getEditorOptions();return D.createElement(B.b,null,D.createElement(B.a,{hideNavigation:n},this.state.fuzzySearchEnabled&&D.createElement(A.a,{closeFuzzySearch:this.closeFuzzySearch,setCurrentModule:this.setCurrentModule,modules:e.modules,directories:e.directories,currentModuleId:i.id}),D.createElement(gt.a,{width:"100%",height:"100%",theme:"CodeSandbox",options:r,editorDidMount:this.configureEditor,editorWillMount:function(n){return Object(G.a)(n,t.props.theme.vscodeTheme)},getEditorOptions:this.getEditorOptions,openReference:this.openReference})))}}]),e}(D.Component);w()(xt,"defaultProps",{width:"100%",height:"100%"});n.default=Object(z.withTheme)(xt)}}]);
//# sourceMappingURL=monaco-editor.29d03e91c.chunk.js.map