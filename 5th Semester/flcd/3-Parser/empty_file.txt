N => program statement_list statement_list_tail statement simple_statement struct_statement arraydecl type declaration_statement assign_statement read_statement print_statement if_statement while_statement condition relation print_type assignee term factor string_type simple_type decision_statement else_clause comment expression int_expression string_expression int_expression_rest term_rest int_exp_signs string_expression_rest string_exp_signs
E => string char int array const else if read while print constant identifier no # ε + - * / % = < <= == != >= > ( ) { } [ ] ;
S => program
P =>
program -> { statement_list }
statement_list -> statement statement_list_tail
statement_list_tail -> statement statement_list_tail | ε
statement -> simple_statement ; | struct_statement | comment
simple_statement -> read_statement | print_statement | assign_statement | declaration_statement
read_statement -> read ( identifier )
print_statement -> print ( print_type )
print_type -> identifier | constant
assign_statement -> identifier = assignee
assignee -> expression
expression -> int_expression | string_expression
int_expression -> term int_expression_rest
int_expression_rest -> int_exp_signs term int_expression_rest | ε
term -> factor term_rest
term_rest -> int_exp_signs factor term_rest | ε
factor -> identifier | constant | ( int_expression )
string_expression -> string string_expression_rest
string_expression_rest -> + string_exp_signs string string_expression_rest | ε
string_exp_signs -> +
int_exp_signs -> + | - | * | / | %
declaration_statement -> type identifier
type -> simple_type | arraydecl
simple_type -> string | int | char
arraydecl -> array [ no ] simple_type
struct_statement -> decision_statement | while_statement
decision_statement -> if_statement
if_statement -> if ( condition ) { statement_list } else_clause
else_clause -> else { statement_list } | ε
while_statement -> while ( condition ) { statement_list }
condition -> identifier relation identifier
relation -> < | <= | == | != | >= | >
comment -> # string